From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Encode42 <me@encode42.dev>
Date: Wed, 29 Sep 2021 13:37:57 -0400
Subject: [PATCH] Config for Grindstones ignoring curses


diff --git a/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java b/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java
index 0bdf874ddb951daf8d469575a44144504472d12d..b54e172fa18adeb563a3c9bda56e5579b64e5bcf 100644
--- a/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java
@@ -130,7 +130,7 @@ public class GrindstoneMenu extends AbstractContainerMenu {
                     Enchantment enchantment = (Enchantment) entry.getKey();
                     Integer integer = (Integer) entry.getValue();
 
-                    if (!enchantment.isCurse()) {
+                    if (!net.pl3x.purpur.PurpurConfig.grindstoneIgnoreCurses || !enchantment.isCurse()) { // Purpur
                         j += enchantment.getMinCost(integer);
                     }
                 }
@@ -230,7 +230,7 @@ public class GrindstoneMenu extends AbstractContainerMenu {
             Entry<Enchantment, Integer> entry = (Entry) iterator.next();
             Enchantment enchantment = (Enchantment) entry.getKey();
 
-            if (!enchantment.isCurse() || EnchantmentHelper.getItemEnchantmentLevel(enchantment, itemstack2) == 0) {
+            if (!net.pl3x.purpur.PurpurConfig.grindstoneIgnoreCurses || !enchantment.isCurse() || EnchantmentHelper.getItemEnchantmentLevel(enchantment, itemstack2) == 0) { // Purpur
                 itemstack2.enchant(enchantment, (Integer) entry.getValue());
             }
         }
@@ -251,7 +251,7 @@ public class GrindstoneMenu extends AbstractContainerMenu {
 
         itemstack1.setCount(amount);
         Map<Enchantment, Integer> map = (Map) EnchantmentHelper.getEnchantments(item).entrySet().stream().filter((entry) -> {
-            return ((Enchantment) entry.getKey()).isCurse();
+            return net.pl3x.purpur.PurpurConfig.grindstoneIgnoreCurses && ((Enchantment) entry.getKey()).isCurse(); // Purpur
         }).collect(Collectors.toMap(Entry::getKey, Entry::getValue));
 
         EnchantmentHelper.setEnchantments(map, itemstack1);
diff --git a/src/main/java/org/purpurmc/purpur/PurpurConfig.java b/src/main/java/org/purpurmc/purpur/PurpurConfig.java
index ffc1c2bf3cc6a892a073acb7d873084e3aaa7067..7a8f17af485dc35ba4095e0adcadc8c32b897a9d 100644
--- a/src/main/java/org/purpurmc/purpur/PurpurConfig.java
+++ b/src/main/java/org/purpurmc/purpur/PurpurConfig.java
@@ -306,6 +306,7 @@ public class PurpurConfig {
     public static int beeInsideBeeHive = 3;
     public static boolean anvilCumulativeCost = true;
     public static int lightningRodRange = 128;
+    public static boolean grindstoneIgnoreCurses = true;
     private static void blockSettings() {
         if (version < 3) {
             boolean oldValue = getBoolean("settings.barrel.packed-barrels", true);
@@ -340,6 +341,7 @@ public class PurpurConfig {
         beeInsideBeeHive = getInt("settings.blocks.beehive.max-bees-inside", beeInsideBeeHive);
         anvilCumulativeCost = getBoolean("settings.blocks.anvil.cumulative-cost", anvilCumulativeCost);
         lightningRodRange = getInt("settings.blocks.lightning_rod.range", lightningRodRange);
+        grindstoneIgnoreCurses = getBoolean("settings.blocks.grindstone.ignore-curses", grindstoneIgnoreCurses);
     }
 
     public static boolean allowInfinityMending = false;
