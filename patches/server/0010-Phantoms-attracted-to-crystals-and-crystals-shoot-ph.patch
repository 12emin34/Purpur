From 2e8872045aafef81931f68bbd35d4e1821a118fa Mon Sep 17 00:00:00 2001
From: William Blake Galbreath <blake.galbreath@gmail.com>
Date: Thu, 9 May 2019 18:26:06 -0500
Subject: [PATCH] Phantoms attracted to crystals and crystals shoot phantoms

---
 .../net/minecraft/server/DamageSource.java    |   1 +
 .../java/net/minecraft/server/Entity.java     |   8 +-
 .../minecraft/server/EntityEnderCrystal.java  |  49 +++++
 .../net/minecraft/server/EntityPhantom.java   | 170 +++++++++++++++++-
 .../net/minecraft/server/IEntityAccess.java   |   1 +
 5 files changed, 219 insertions(+), 10 deletions(-)

diff --git a/src/main/java/net/minecraft/server/DamageSource.java b/src/main/java/net/minecraft/server/DamageSource.java
index 730a15f332..31454349a2 100644
--- a/src/main/java/net/minecraft/server/DamageSource.java
+++ b/src/main/java/net/minecraft/server/DamageSource.java
@@ -77,6 +77,7 @@ public class DamageSource {
         return (new EntityDamageSourceIndirect("thrown", entity, entity1)).c();
     }
 
+    public static DamageSource indirectMagic(Entity entity, @Nullable Entity owner) { return c(entity, owner); } // Purpur - OBFHELPER
     public static DamageSource c(Entity entity, @Nullable Entity entity1) {
         return (new EntityDamageSourceIndirect("indirectMagic", entity, entity1)).setIgnoreArmor().setMagic();
     }
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 40ab9daade..dd787b7b65 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -1400,6 +1400,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         return d3 * d3 + d4 * d4 + d5 * d5;
     }
 
+    public double getDistanceSq(Entity entity) { return this.h(entity); } // Purpur - OBFHELPER
     public double h(Entity entity) {
         return this.c(entity.getPositionVector());
     }
@@ -1919,14 +1920,13 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         return this.a(new ItemStack(imaterial), (float) i);
     }
 
-    @Nullable
-    public EntityItem a(ItemStack itemstack) {
+    @Nullable public EntityItem dropItem(ItemStack itemstack) { return this.a(itemstack); } // Purpur - OBFHELPER
+    @Nullable public EntityItem a(ItemStack itemstack) {
         return this.a(itemstack, 0.0F);
     }
 
     @Nullable public final EntityItem dropItem(ItemStack itemstack, float offset) { return this.a(itemstack, offset); } // Paper - OBFHELPER
-    @Nullable
-    public EntityItem a(ItemStack itemstack, float f) {
+    @Nullable public EntityItem a(ItemStack itemstack, float f) {
         if (itemstack.isEmpty()) {
             return null;
         } else if (this.world.isClientSide) {
diff --git a/src/main/java/net/minecraft/server/EntityEnderCrystal.java b/src/main/java/net/minecraft/server/EntityEnderCrystal.java
index 801552fc61..ad88cc9822 100644
--- a/src/main/java/net/minecraft/server/EntityEnderCrystal.java
+++ b/src/main/java/net/minecraft/server/EntityEnderCrystal.java
@@ -13,6 +13,12 @@ public class EntityEnderCrystal extends Entity {
     private static final DataWatcherObject<Optional<BlockPosition>> c = DataWatcher.a(EntityEnderCrystal.class, DataWatcherRegistry.m);
     private static final DataWatcherObject<Boolean> d = DataWatcher.a(EntityEnderCrystal.class, DataWatcherRegistry.i);
     public int b;
+    // Purpur start
+    private EntityPhantom targetPhantom;
+    private int phantomBeamTicks = 0;
+    private int phantomDamageCooldown = 0;
+    private int idleCooldown = 0;
+    // Purpur end
 
     public EntityEnderCrystal(EntityTypes<? extends EntityEnderCrystal> entitytypes, World world) {
         super(entitytypes, world);
@@ -54,7 +60,50 @@ public class EntityEnderCrystal extends Entity {
             }
         }
 
+        // Purpur start
+        if (--idleCooldown > 0) {
+            return; // on cooldown
+        }
+
+        if (targetPhantom == null) {
+            for (EntityPhantom phantom : world.getEntitiesByClass(EntityPhantom.class, getBoundingBox().grow(16, 16, 16))) {
+                if (phantom.hasLineOfSight(this)) {
+                    attackPhantom(phantom);
+                    break;
+                }
+            }
+        } else {
+            setBeamTarget(new BlockPosition(targetPhantom).add(0, -2, 0));
+            if (--phantomBeamTicks > 0 && targetPhantom.isAlive()) {
+                phantomDamageCooldown--;
+                if (targetPhantom.hasLineOfSight(this)) {
+                    if (phantomDamageCooldown <= 0) {
+                        phantomDamageCooldown = 20;
+                        targetPhantom.damageEntity(DamageSource.indirectMagic(this, this), 1.0F);
+                    }
+                } else {
+                    forgetPhantom(); // no longer in sight
+                }
+            } else {
+                forgetPhantom(); // attacked long enough
+            }
+        }
+    }
+
+    private void attackPhantom(EntityPhantom phantom) {
+        phantomDamageCooldown = 0;
+        phantomBeamTicks = 60;
+        targetPhantom = phantom;
+    }
+
+    private void forgetPhantom() {
+        targetPhantom = null;
+        setBeamTarget(null);
+        phantomBeamTicks = 0;
+        phantomDamageCooldown = 0;
+        idleCooldown = 60;
     }
+    // Purpur end
 
     @Override
     protected void b(NBTTagCompound nbttagcompound) {
diff --git a/src/main/java/net/minecraft/server/EntityPhantom.java b/src/main/java/net/minecraft/server/EntityPhantom.java
index e5d032d02b..9b62d2ce38 100644
--- a/src/main/java/net/minecraft/server/EntityPhantom.java
+++ b/src/main/java/net/minecraft/server/EntityPhantom.java
@@ -8,9 +8,10 @@ import javax.annotation.Nullable;
 public class EntityPhantom extends EntityFlying implements IMonster {
 
     private static final DataWatcherObject<Integer> b = DataWatcher.a(EntityPhantom.class, DataWatcherRegistry.b);
-    private Vec3D c;
-    private BlockPosition d;
-    private EntityPhantom.AttackPhase bz;
+    private Vec3D c; public void setHomeOffset(Vec3D offset) { this.c = offset; } public Vec3D getHomeOffset() { return this.c; } // Purpur - OBFHELPER
+    private BlockPosition d; public void setHome(BlockPosition home) { this.d = home; } public BlockPosition getHome() { return this.d; } // Purpur - OBFHELPER
+    private EntityPhantom.AttackPhase bz; public AttackPhase getAttackPhase() { return this.bz; } // Purpur - OBFHELPER
+    private BlockPosition crystalPosition; // Purpur
 
     public EntityPhantom(EntityTypes<? extends EntityPhantom> entitytypes, World world) {
         super(entitytypes, world);
@@ -29,8 +30,10 @@ public class EntityPhantom extends EntityFlying implements IMonster {
 
     @Override
     protected void initPathfinder() {
+        this.goalSelector.a(0, new FindCrystalGoal(this)); // Purpur
         this.goalSelector.a(1, new EntityPhantom.c());
         this.goalSelector.a(2, new EntityPhantom.i());
+        this.goalSelector.a(3, new OrbitCrystalGoal(this)); // Purpur
         this.goalSelector.a(3, new EntityPhantom.e());
         this.targetSelector.a(1, new EntityPhantom.b());
     }
@@ -114,6 +117,26 @@ public class EntityPhantom extends EntityFlying implements IMonster {
         super.mobTick();
     }
 
+    // Purpur start
+    @Override
+    protected LootTableInfo.Builder a(boolean wasRecentlyHit, DamageSource damagesource) { // dropLoot
+        boolean dropped = false;
+        if (killer == null && damagesource.getEntity() instanceof EntityEnderCrystal) {
+            if (random.nextInt(5) < 1) { // 1 out of 5 chance (20%)
+                dropped = dropItem(new ItemStack(Items.PHANTOM_MEMBRANE)) != null;
+            }
+        }
+        if (!dropped) {
+            return super.a(wasRecentlyHit, damagesource); // dropLoot
+        }
+        return new LootTableInfo.Builder((WorldServer) world);
+    }
+
+    public boolean isCirclingCrystal() {
+        return crystalPosition != null;
+    }
+    // Purpur end
+
     @Override
     public GroupDataEntity prepare(GeneratorAccess generatoraccess, DifficultyDamageScaler difficultydamagescaler, EnumMobSpawn enummobspawn, @Nullable GroupDataEntity groupdataentity, @Nullable NBTTagCompound nbttagcompound) {
         this.d = (new BlockPosition(this)).up(5);
@@ -202,6 +225,136 @@ public class EntityPhantom extends EntityFlying implements IMonster {
     }
     // Paper end
 
+    // Purpur start
+    class FindCrystalGoal extends PathfinderGoal {
+        private final EntityPhantom phantom;
+        private EntityEnderCrystal crystal;
+        private java.util.Comparator<EntityEnderCrystal> comparator;
+
+        FindCrystalGoal(EntityPhantom phantom) {
+            this.phantom = phantom;
+            comparator = java.util.Comparator.comparingDouble(phantom::h);
+        }
+
+        @Override
+        public boolean a() { // shouldExecute
+            double range = maxTargetRange();
+            List<EntityEnderCrystal> crystals = world.getEntitiesByClass(EntityEnderCrystal.class, phantom.getBoundingBox().grow(range, range, range));
+            if (crystals.isEmpty()) {
+                return false;
+            }
+            crystals.sort(comparator);
+            crystal = crystals.get(0);
+            if (phantom.getDistanceSq(crystal) > range * range) {
+                crystal = null;
+                return false;
+            }
+            return true;
+        }
+
+        @Override
+        public boolean b() { // shouldContinueExecuting
+            if (crystal == null || !crystal.isAlive()) {
+                return false;
+            }
+            double range = maxTargetRange();
+            return phantom.getDistanceSq(crystal) <= (range * range) * 2;
+        }
+
+        @Override
+        public void c() { // startExecuting
+            phantom.crystalPosition = new BlockPosition(crystal).add(0, phantom.getRandom().nextInt(10) + 10, 0);
+        }
+
+        @Override
+        public void d() { // resetTask
+            crystal = null;
+            phantom.crystalPosition = null;
+            super.d();
+        }
+
+        private double maxTargetRange() {
+            AttributeInstance range = phantom.getAttributeInstance(GenericAttributes.FOLLOW_RANGE);
+            return range == null ? 16.0D : range.getValue();
+        }
+
+        class DistanceComparator implements java.util.Comparator<Entity> {
+            private final Entity entity;
+
+            public DistanceComparator(Entity entity) {
+                this.entity = entity;
+            }
+
+            public int compare(Entity entity1, Entity entity2) {
+                return Double.compare(entity.getDistanceSq(entity1), entity.getDistanceSq(entity2));
+            }
+        }
+    }
+
+    class OrbitCrystalGoal extends PathfinderGoal {
+        private final EntityPhantom phantom;
+        private float offset;
+        private float radius;
+        private float verticalChange;
+        private float direction;
+
+        OrbitCrystalGoal(EntityPhantom phantom) {
+            this.phantom = phantom;
+            this.a(EnumSet.of(PathfinderGoal.Type.MOVE));
+        }
+
+        @Override
+        public boolean a() { // shouldExecute
+            return phantom.isCirclingCrystal();
+        }
+
+        @Override
+        public void c() { // startExecuting
+            this.radius = 5.0F + phantom.random.nextFloat() * 10.0F;
+            this.verticalChange = -4.0F + phantom.random.nextFloat() * 9.0F;
+            this.direction = phantom.random.nextBoolean() ? 1.0F : -1.0F;
+            updateOffset();
+        }
+
+        @Override
+        public void e() { // tick
+            if (phantom.random.nextInt(350) == 0) {
+                this.verticalChange = -4.0F + phantom.random.nextFloat() * 9.0F;
+            }
+            if (phantom.random.nextInt(250) == 0) {
+                ++this.radius;
+                if (this.radius > 15.0F) {
+                    this.radius = 5.0F;
+                    this.direction = -this.direction;
+                }
+            }
+            if (phantom.random.nextInt(450) == 0) {
+                this.offset = phantom.random.nextFloat() * 2.0F * 3.1415927F;
+                updateOffset();
+            }
+            if (phantom.getHomeOffset().c(phantom.locX, phantom.locY, phantom.locZ) < 4.0D) {
+                updateOffset();
+            }
+            if (phantom.getHomeOffset().y < phantom.locY && !phantom.world.isEmpty((new BlockPosition(phantom)).down(1))) {
+                this.verticalChange = Math.max(1.0F, this.verticalChange);
+                updateOffset();
+            }
+            if (phantom.getHomeOffset().y > phantom.locY && !phantom.world.isEmpty((new BlockPosition(phantom)).up(1))) {
+                this.verticalChange = Math.min(-1.0F, this.verticalChange);
+                updateOffset();
+            }
+        }
+
+        private void updateOffset() {
+            this.offset += this.direction * 15.0F * 0.017453292F;
+            phantom.setHomeOffset(new Vec3D(phantom.crystalPosition).add(
+                    (double) (this.radius * MathHelper.cos(this.offset)),
+                    (double) (-4.0F + this.verticalChange),
+                    (double) (this.radius * MathHelper.sin(this.offset))));
+        }
+    }
+    // Purpur end
+
     class b extends PathfinderGoal {
 
         private final PathfinderTargetCondition b;
@@ -259,7 +412,7 @@ public class EntityPhantom extends EntityFlying implements IMonster {
         public boolean a() {
             EntityLiving entityliving = EntityPhantom.this.getGoalTarget();
 
-            return entityliving != null ? EntityPhantom.this.a(EntityPhantom.this.getGoalTarget(), PathfinderTargetCondition.a) : false;
+            return !isCirclingCrystal() && entityliving != null && EntityPhantom.this.a(EntityPhantom.this.getGoalTarget(), PathfinderTargetCondition.a); // Purpur
         }
 
         @Override
@@ -305,11 +458,16 @@ public class EntityPhantom extends EntityFlying implements IMonster {
 
         @Override
         public boolean a() {
-            return EntityPhantom.this.getGoalTarget() != null && EntityPhantom.this.bz == EntityPhantom.AttackPhase.SWOOP;
+            return !isCirclingCrystal() && EntityPhantom.this.getGoalTarget() != null && EntityPhantom.this.getAttackPhase() == EntityPhantom.AttackPhase.SWOOP; // Purpur
         }
 
         @Override
         public boolean b() {
+            // Purpur start
+            if (isCirclingCrystal()) {
+                return false;
+            }
+            // Purpur end
             EntityLiving entityliving = EntityPhantom.this.getGoalTarget();
 
             if (entityliving == null) {
@@ -379,7 +537,7 @@ public class EntityPhantom extends EntityFlying implements IMonster {
 
         @Override
         public boolean a() {
-            return EntityPhantom.this.getGoalTarget() == null || EntityPhantom.this.bz == EntityPhantom.AttackPhase.CIRCLE;
+            return !isCirclingCrystal() && EntityPhantom.this.getGoalTarget() == null || EntityPhantom.this.getAttackPhase() == EntityPhantom.AttackPhase.CIRCLE; // Purpur
         }
 
         @Override
diff --git a/src/main/java/net/minecraft/server/IEntityAccess.java b/src/main/java/net/minecraft/server/IEntityAccess.java
index dca18afdbb..9aaa75e959 100644
--- a/src/main/java/net/minecraft/server/IEntityAccess.java
+++ b/src/main/java/net/minecraft/server/IEntityAccess.java
@@ -34,6 +34,7 @@ public interface IEntityAccess {
         });
     }
 
+    default <T extends Entity> List<T> getEntitiesByClass(Class<? extends T> oclass, AxisAlignedBB axisalignedbb) { return a(oclass, axisalignedbb); } // Purpur - OBFHELPER
     default <T extends Entity> List<T> a(Class<? extends T> oclass, AxisAlignedBB axisalignedbb) {
         return this.a(oclass, axisalignedbb, IEntitySelector.f);
     }
-- 
2.20.1

