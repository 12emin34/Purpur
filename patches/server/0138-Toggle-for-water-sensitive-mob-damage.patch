From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: YouHaveTrouble <garrenpolska@gmail.com>
Date: Fri, 5 Feb 2021 01:11:22 +0100
Subject: [PATCH] Toggle for water sensitive mob damage


diff --git a/src/main/java/net/minecraft/world/entity/GlowSquid.java b/src/main/java/net/minecraft/world/entity/GlowSquid.java
index b6df98797757462f35c306aa4c6ea1585a9a6ddc..506632a6b5107f5ef08cd87808b8c4be1e96b49f 100644
--- a/src/main/java/net/minecraft/world/entity/GlowSquid.java
+++ b/src/main/java/net/minecraft/world/entity/GlowSquid.java
@@ -48,6 +48,11 @@ public class GlowSquid extends Squid {
     public boolean canFly() {
         return this.level.purpurConfig.glowSquidsCanFly;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.glowSquidTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/ambient/Bat.java b/src/main/java/net/minecraft/world/entity/ambient/Bat.java
index 007c945725721ddb8a3dc4b8085e8c68da741b93..53ef2004d1b6acaf27fef9a658fff99b7d343215 100644
--- a/src/main/java/net/minecraft/world/entity/ambient/Bat.java
+++ b/src/main/java/net/minecraft/world/entity/ambient/Bat.java
@@ -102,6 +102,11 @@ public class Bat extends AmbientCreature {
         this.getAttribute(Attributes.ARMOR_TOUGHNESS).setBaseValue(this.level.purpurConfig.batArmorToughness);
         this.getAttribute(Attributes.ATTACK_KNOCKBACK).setBaseValue(this.level.purpurConfig.batAttackKnockback);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.batTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/Bee.java b/src/main/java/net/minecraft/world/entity/animal/Bee.java
index fa71241df0b291fedf7ff0a70dc9dc375f65b8a8..cf2515ecea8bb2fefaf025977a705d9545f85e21 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Bee.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Bee.java
@@ -176,7 +176,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
         // Paper end
         this.lookControl = new Bee.BeeLookControl(this);
         this.setPathfindingMalus(BlockPathTypes.DANGER_FIRE, -1.0F);
-        this.setPathfindingMalus(BlockPathTypes.WATER, -1.0F);
+        if (isSensitiveToWater()) this.setPathfindingMalus(BlockPathTypes.WATER, -1.0F); // Purpur
         this.setPathfindingMalus(BlockPathTypes.WATER_BORDER, 16.0F);
         this.setPathfindingMalus(BlockPathTypes.COCOA, -1.0F);
         this.setPathfindingMalus(BlockPathTypes.FENCE, -1.0F);
@@ -224,6 +224,11 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
     public int getPurpurBreedTime() {
         return this.level.purpurConfig.beeBreedingTicks;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.beeTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/Cat.java b/src/main/java/net/minecraft/world/entity/animal/Cat.java
index 4e0f54689e4db6d4e23ed09bf9645b42fa889a5d..d60eb249c3cc893c8546ac99f7b25e545717335c 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Cat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Cat.java
@@ -128,6 +128,11 @@ public class Cat extends TamableAnimal {
     public int getPurpurBreedTime() {
         return this.level.purpurConfig.catBreedingTicks;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.catTakeDamageFromWater;
+    }
     // Purpur end
 
     public ResourceLocation getResourceLocation() {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Chicken.java b/src/main/java/net/minecraft/world/entity/animal/Chicken.java
index fe266b94d08b8977451f75ec87c19497ac0ab975..14b0160deab7895f0827d5dc75a48a98d906d7c8 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Chicken.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Chicken.java
@@ -81,6 +81,11 @@ public class Chicken extends Animal {
     public int getPurpurBreedTime() {
         return this.level.purpurConfig.chickenBreedingTicks;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.chickenTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/Cod.java b/src/main/java/net/minecraft/world/entity/animal/Cod.java
index 861727f150f28a508d3b1c7067d410f0d696aa89..5b79d821e8b55c8876eadcbe811a2c0584e7e02b 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Cod.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Cod.java
@@ -33,6 +33,11 @@ public class Cod extends AbstractSchoolingFish {
     public void initAttributes() {
         this.getAttribute(net.minecraft.world.entity.ai.attributes.Attributes.MAX_HEALTH).setBaseValue(this.level.purpurConfig.codMaxHealth);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.codTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/Cow.java b/src/main/java/net/minecraft/world/entity/animal/Cow.java
index b063a74327e51b3cd27427426b92ef687c59c94b..00eec3f51e62858e7b85b3340e76bf66bfd4370f 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Cow.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Cow.java
@@ -67,6 +67,11 @@ public class Cow extends Animal {
     public int getPurpurBreedTime() {
         return this.level.purpurConfig.cowBreedingTicks;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.cowTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/Dolphin.java b/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
index a8ca2d120a545d423fc00aef5299b66b1636b6d3..b0c933644c1f4b5aa142c7c4d26a9b81cb4051f7 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
@@ -162,6 +162,11 @@ public class Dolphin extends WaterAnimal {
     public void initAttributes() {
         this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(this.level.purpurConfig.dolphinMaxHealth);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.dolphinTakeDamageFromWater;
+    }
     // Purpur end
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/entity/animal/Fox.java b/src/main/java/net/minecraft/world/entity/animal/Fox.java
index d64deacacb64dc0572fc0b5d559ddd833397ed47..41690949a990a753a24e6c27595cb0b50a52e0a8 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Fox.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Fox.java
@@ -188,6 +188,11 @@ public class Fox extends Animal {
     public int getPurpurBreedTime() {
         return this.level.purpurConfig.foxBreedingTicks;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.foxTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/IronGolem.java b/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
index 4003e4f4128f14e0dffa666ed8f4447aadd1dede..e3d725e656bc5ffc5fc92133794a80799fb21c48 100644
--- a/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
+++ b/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
@@ -89,6 +89,11 @@ public class IronGolem extends AbstractGolem implements NeutralMob {
     public void initAttributes() {
         this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(this.level.purpurConfig.ironGolemMaxHealth);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.ironGolemTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java b/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
index 6cd1a173857b9815073d4bb5020ebe6582844418..86830a554c750114f5ea11cf19bda86d37e69ac2 100644
--- a/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
+++ b/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
@@ -89,6 +89,11 @@ public class MushroomCow extends Cow implements Shearable {
     public int getPurpurBreedTime() {
         return this.level.purpurConfig.mooshroomBreedingTicks;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.mooshroomTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/Ocelot.java b/src/main/java/net/minecraft/world/entity/animal/Ocelot.java
index 25f01fe6bda429a13188e62aee68d242c9d5404b..7ddf1dbef2df9982bb0975918d336ef117666bdb 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Ocelot.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Ocelot.java
@@ -93,6 +93,11 @@ public class Ocelot extends Animal {
     public int getPurpurBreedTime() {
         return this.level.purpurConfig.ocelotBreedingTicks;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.ocelotTakeDamageFromWater;
+    }
     // Purpur end
 
     public boolean isTrusting() {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Panda.java b/src/main/java/net/minecraft/world/entity/animal/Panda.java
index 260fb72d48e2e2c6d27ab21b8a5049235d51555c..72a510efeb885cd15f1d573aa94e14ecf51b66b3 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Panda.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Panda.java
@@ -142,6 +142,11 @@ public class Panda extends Animal {
     public int getPurpurBreedTime() {
         return this.level.purpurConfig.pandaBreedingTicks;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.pandaTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/Parrot.java b/src/main/java/net/minecraft/world/entity/animal/Parrot.java
index b15fd1a01f273cf1d3dc2965a9d3584f75579e2d..55b14422fea113ea64717f64226aac142f6f60bd 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Parrot.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Parrot.java
@@ -195,6 +195,11 @@ public class Parrot extends ShoulderRidingEntity implements FlyingAnimal {
     public int getPurpurBreedTime() {
         return 6000;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.parrotTakeDamageFromWater;
+    }
     // Purpur end
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/entity/animal/Pig.java b/src/main/java/net/minecraft/world/entity/animal/Pig.java
index 179b4767283090467d5f415ce1cce44007f1e937..19c2565f1acd19676cebb9f8a6532de6752fdf99 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Pig.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Pig.java
@@ -89,6 +89,11 @@ public class Pig extends Animal implements ItemSteerable, Saddleable {
     public int getPurpurBreedTime() {
         return this.level.purpurConfig.pigBreedingTicks;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.pigTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/PolarBear.java b/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
index c0c7edfc243378bce9bb44d29c58d948b95a9310..54c1f56a20d592f348e61c1ca7b9eeffd08a26f7 100644
--- a/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
+++ b/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
@@ -123,6 +123,11 @@ public class PolarBear extends Animal implements NeutralMob {
     public int getPurpurBreedTime() {
         return this.level.purpurConfig.polarBearBreedingTicks;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.polarBearTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java b/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java
index 988093b46a4c386f8d47a4c530b8e9f6f49efd0d..2a9af6af653dc62c99baff01ebea8ad64ff62fe0 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java
@@ -65,6 +65,11 @@ public class Pufferfish extends AbstractFish {
     public void initAttributes() {
         this.getAttribute(net.minecraft.world.entity.ai.attributes.Attributes.MAX_HEALTH).setBaseValue(this.level.purpurConfig.pufferfishMaxHealth);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.pufferfishTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/Rabbit.java b/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
index b8dd08ad346e90ddde14289441d6e52776c42538..8706b15afa5630c94a5568d6a0644edf2ba12ff5 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
@@ -147,6 +147,11 @@ public class Rabbit extends Animal {
     public int getPurpurBreedTime() {
         return this.level.purpurConfig.rabbitBreedingTicks;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.rabbitTakeDamageFromWater;
+    }
     // Purpur end
 
     // CraftBukkit start - code from constructor
diff --git a/src/main/java/net/minecraft/world/entity/animal/Salmon.java b/src/main/java/net/minecraft/world/entity/animal/Salmon.java
index 3873fb0e2d95973397f9a23dc363f7a65a1edfe6..16171814bab7fbc0c177323cc5f8b026c8ebbcd4 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Salmon.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Salmon.java
@@ -33,6 +33,11 @@ public class Salmon extends AbstractSchoolingFish {
     public void initAttributes() {
         this.getAttribute(net.minecraft.world.entity.ai.attributes.Attributes.MAX_HEALTH).setBaseValue(this.level.purpurConfig.salmonMaxHealth);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.salmonTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/Sheep.java b/src/main/java/net/minecraft/world/entity/animal/Sheep.java
index dfd8d795abbe3912658c9d847424424e83006408..fbe7d731df4284e2bd99da6bae8d146cf9587d35 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Sheep.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Sheep.java
@@ -141,6 +141,11 @@ public class Sheep extends Animal implements Shearable {
     public int getPurpurBreedTime() {
         return this.level.purpurConfig.sheepBreedingTicks;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.sheepTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java b/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java
index edf4537f08a54e1a5b043927678bbddf3bdfd881..069f90f113aeaa61236c86a07463c4190fc36c4e 100644
--- a/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java
+++ b/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java
@@ -116,7 +116,7 @@ public class SnowGolem extends AbstractGolem implements Shearable, RangedAttackM
 
     @Override
     public boolean isSensitiveToWater() {
-        return true;
+        return this.level.purpurConfig.snowGolemTakeDamageFromWater; // Purpur
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/Squid.java b/src/main/java/net/minecraft/world/entity/animal/Squid.java
index 4850960c7c4f38c7d81b8945f8c87504d5ccd0d0..7a8f8be052dc3ee6dc56dd39017e11488af0a8ff 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Squid.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Squid.java
@@ -95,6 +95,11 @@ public class Squid extends WaterAnimal {
     public boolean isInWater() {
         return this.wasTouchingWater || canFly();
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.squidTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/TropicalFish.java b/src/main/java/net/minecraft/world/entity/animal/TropicalFish.java
index e439f0e24851697e663f783edf643d5b1602a0ff..77237646232cf3b7975c7a0c1d2b83d688eaa8b8 100644
--- a/src/main/java/net/minecraft/world/entity/animal/TropicalFish.java
+++ b/src/main/java/net/minecraft/world/entity/animal/TropicalFish.java
@@ -69,6 +69,11 @@ public class TropicalFish extends AbstractSchoolingFish {
     public void initAttributes() {
         this.getAttribute(net.minecraft.world.entity.ai.attributes.Attributes.MAX_HEALTH).setBaseValue(this.level.purpurConfig.tropicalFishMaxHealth);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.tropicalFishTakeDamageFromWater;
+    }
     // Purpur end
 
     public static String getPredefinedName(int variant) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Turtle.java b/src/main/java/net/minecraft/world/entity/animal/Turtle.java
index 539777cb24e7427542ac43665585d3acea9f888c..67b92fd831cb87bf8a7c5b96f17c0d3557bf9c62 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Turtle.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Turtle.java
@@ -107,6 +107,11 @@ public class Turtle extends Animal {
     public int getPurpurBreedTime() {
         return this.level.purpurConfig.turtleBreedingTicks;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.turtleTakeDamageFromWater;
+    }
     // Purpur end
 
     public void setHomePos(BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Wolf.java b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
index ffe8f80cfe3bec8fe79415015f5290749fcb770e..dd514cbf2f03b688eb4d8cd49052f1775d3adebb 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Wolf.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
@@ -207,6 +207,11 @@ public class Wolf extends TamableAnimal implements NeutralMob {
         setCollarColor(level.purpurConfig.wolfDefaultCollarColor);
         super.tame(player);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.wolfTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
index 6d444248b9e283e31d5777d450a52643cc84f59b..83eef99d7f24634e301a51d2825370c9283b53ac 100644
--- a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
+++ b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
@@ -127,6 +127,11 @@ public class Axolotl extends Animal implements LerpingModel, Bucketable {
     public int getPurpurBreedTime() {
         return this.level.purpurConfig.axolotlBreedingTicks;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.axolotlTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
index 59caabbe84a24ea47796ae71130961dff146a76f..ae50bb7e86cddd95a0b49a89682083994ddf14ef 100644
--- a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
@@ -114,6 +114,11 @@ public class Goat extends Animal {
     public int getPurpurBreedTime() {
         return this.level.purpurConfig.goatBreedingTicks;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.goatTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/Donkey.java b/src/main/java/net/minecraft/world/entity/animal/horse/Donkey.java
index 782e9fae7cdd0b3bbf2e1fb408c18663771cc346..e64dec4560331d34f3c2885f50d716744e90f5df 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/Donkey.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/Donkey.java
@@ -40,6 +40,11 @@ public class Donkey extends AbstractChestedHorse {
     public int getPurpurBreedTime() {
         return this.level.purpurConfig.donkeyBreedingTicks;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.donkeyTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/Horse.java b/src/main/java/net/minecraft/world/entity/animal/horse/Horse.java
index 6a7d8ff804b184005fda17f3d7a4b9750a7c2fe5..704e08b1ad0601e9b7f3b355214a820858a421ce 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/Horse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/Horse.java
@@ -65,6 +65,11 @@ public class Horse extends AbstractHorse {
     public int getPurpurBreedTime() {
         return this.level.purpurConfig.horseBreedingTicks;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.horseTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java b/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
index 3c9ea07ded25ac8a479a03fecfdd7ddb9d5a046c..708f0bccffc05fac0d711df13dd1b5e173ff6109 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
@@ -136,6 +136,11 @@ public class Llama extends AbstractChestedHorse implements RangedAttackMob {
     public int getPurpurBreedTime() {
         return this.level.purpurConfig.llamaBreedingTicks;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.llamaTakeDamageFromWater;
+    }
     // Purpur end
 
     public boolean isTraderLlama() {
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/Mule.java b/src/main/java/net/minecraft/world/entity/animal/horse/Mule.java
index 762cc54c1812e70aabd18baf2c72930dc72981a7..aa78c4512de01229bdc5fcdc30e7ac992c96ea07 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/Mule.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/Mule.java
@@ -39,6 +39,11 @@ public class Mule extends AbstractChestedHorse {
     public int getPurpurBreedTime() {
         return this.level.purpurConfig.muleBreedingTicks;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.muleTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
index 57d98741d90e78c11f9ef8f00dbf75e9d452ef9a..dc8e892673b9ce137c2d4236c4ed4e843922438b 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
@@ -55,6 +55,11 @@ public class SkeletonHorse extends AbstractHorse {
     public int getPurpurBreedTime() {
         return 6000;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.skeletonHorseTakeDamageFromWater;
+    }
     // Purpur end
 
     public static AttributeSupplier.Builder createAttributes() {
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java b/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
index 53a327f4170ffad9ff1736fa34bc733ecf5ffa9a..44f7d38ae3de0210f62477474afdc314e5c7054a 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
@@ -67,6 +67,11 @@ public class TraderLlama extends Llama {
     public int getPurpurBreedTime() {
         return this.level.purpurConfig.traderLlamaBreedingTicks;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.traderLlamaTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java
index a2636f6e4767d408ef9d2cda4c346abdaa88da37..6d1938f1cbad394f218b36ec8958d5e7ba6623f7 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java
@@ -53,6 +53,11 @@ public class ZombieHorse extends AbstractHorse {
     public int getPurpurBreedTime() {
         return 6000;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.zombieHorseTakeDamageFromWater;
+    }
     // Purpur end
 
     public static AttributeSupplier.Builder createAttributes() {
diff --git a/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
index a639ebe2ea3f7fdc5367e0d2cec7a257c7cb4933..23e5ab0e3b99659d30d8139dc005a714741a97c7 100644
--- a/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
+++ b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
@@ -165,6 +165,11 @@ public class EnderDragon extends Mob implements Enemy {
     public void initAttributes() {
         this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(this.level.purpurConfig.enderDragonMaxHealth);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.enderDragonTakeDamageFromWater;
+    }
     // Purpur end
 
     public static AttributeSupplier.Builder createAttributes() {
diff --git a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
index 2207c5a71b8a3c7c0c68388ec744c5272d10ab36..1329de5d3e6294d2eb7b6852b8cad19f0f4dba77 100644
--- a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
+++ b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
@@ -234,6 +234,11 @@ public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob
     public void initAttributes() {
         this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(this.level.purpurConfig.witherMaxHealth);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.witherTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Blaze.java b/src/main/java/net/minecraft/world/entity/monster/Blaze.java
index 773884b49ba5d0586c43f4c58cdcf9a8ce3de9e8..47ce2e61c2ce7984505355de5401c2310e9644b0 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Blaze.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Blaze.java
@@ -33,7 +33,7 @@ public class Blaze extends Monster {
     public Blaze(EntityType<? extends Blaze> type, Level world) {
         super(type, world);
         this.moveControl = new org.purpurmc.purpur.controller.FlyingWithSpacebarMoveControllerWASD(this, 0.3F); // Purpur
-        this.setPathfindingMalus(BlockPathTypes.WATER, -1.0F);
+        if (isSensitiveToWater()) this.setPathfindingMalus(BlockPathTypes.WATER, -1.0F); // Purpur
         this.setPathfindingMalus(BlockPathTypes.LAVA, 8.0F);
         this.setPathfindingMalus(BlockPathTypes.DANGER_FIRE, 0.0F);
         this.setPathfindingMalus(BlockPathTypes.DAMAGE_FIRE, 0.0F);
@@ -143,7 +143,7 @@ public class Blaze extends Monster {
 
     @Override
     public boolean isSensitiveToWater() {
-        return true;
+        return this.level.purpurConfig.blazeTakeDamageFromWater; // Purpur
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/CaveSpider.java b/src/main/java/net/minecraft/world/entity/monster/CaveSpider.java
index b9ee6fdaad09c92fdeea2e5be606818278a77c21..5347ba12f2a07601c9f044081e5e6ce6472c4a2a 100644
--- a/src/main/java/net/minecraft/world/entity/monster/CaveSpider.java
+++ b/src/main/java/net/minecraft/world/entity/monster/CaveSpider.java
@@ -48,6 +48,11 @@ public class CaveSpider extends Spider {
     public void initAttributes() {
         this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(this.level.purpurConfig.caveSpiderMaxHealth);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.caveSpiderTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Creeper.java b/src/main/java/net/minecraft/world/entity/monster/Creeper.java
index 6acdd443e1e9d59efab8966f5f3ddbfb7be72336..fa4d5579dcdaad04fa2e6cd9ae47af1154739121 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Creeper.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Creeper.java
@@ -151,6 +151,11 @@ public class Creeper extends Monster implements PowerableMob {
         }
         return super.finalizeSpawn(world, difficulty, spawnReason, entityData, entityNbt);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.creeperTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Drowned.java b/src/main/java/net/minecraft/world/entity/monster/Drowned.java
index dbf1c0704788136f4f8a893460f57ba6d3f42780..8e7e94779f034e036110365f4200540a89910fd0 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Drowned.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Drowned.java
@@ -108,6 +108,11 @@ public class Drowned extends Zombie implements RangedAttackMob {
     public boolean jockeyTryExistingChickens() {
         return level.purpurConfig.drownedJockeyTryExistingChickens;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.drownedTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/ElderGuardian.java b/src/main/java/net/minecraft/world/entity/monster/ElderGuardian.java
index 01be40f1740fc689b101fc596dbbb1e66de0bfb1..64193dab104b735a9fa3b335774e662629110c79 100644
--- a/src/main/java/net/minecraft/world/entity/monster/ElderGuardian.java
+++ b/src/main/java/net/minecraft/world/entity/monster/ElderGuardian.java
@@ -53,6 +53,11 @@ public class ElderGuardian extends Guardian {
     public void initAttributes() {
         this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(this.level.purpurConfig.elderGuardianMaxHealth);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.elderGuardianTakeDamageFromWater;
+    }
     // Purpur end
 
     public static AttributeSupplier.Builder createAttributes() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/EnderMan.java b/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
index 306da3808e98847534f4d4190c5b2f82ef50224c..6c9b3bb54b163cb2a6c05993e792558e983feecc 100644
--- a/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
+++ b/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
@@ -84,7 +84,7 @@ public class EnderMan extends Monster implements NeutralMob {
     public EnderMan(EntityType<? extends EnderMan> type, Level world) {
         super(type, world);
         this.maxUpStep = 1.0F;
-        this.setPathfindingMalus(BlockPathTypes.WATER, -1.0F);
+        if (isSensitiveToWater()) this.setPathfindingMalus(BlockPathTypes.WATER, -1.0F); // Purpur
     }
 
     // Purpur start
@@ -297,7 +297,7 @@ public class EnderMan extends Monster implements NeutralMob {
 
     @Override
     public boolean isSensitiveToWater() {
-        return true;
+        return this.level.purpurConfig.endermanTakeDamageFromWater; // Purpur
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Endermite.java b/src/main/java/net/minecraft/world/entity/monster/Endermite.java
index 1058897ab91e13884b480ad0e5028fb2a205fe05..df1d1085419b41920542260a75262b1a6ab3eb41 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Endermite.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Endermite.java
@@ -57,6 +57,11 @@ public class Endermite extends Monster {
     public void initAttributes() {
         this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(this.level.purpurConfig.endermiteMaxHealth);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.endermiteTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Evoker.java b/src/main/java/net/minecraft/world/entity/monster/Evoker.java
index 281e8e6232c30cf5c20e9e2de4ac2ab4d0722ccf..912c594c2a5df21663b26da81cc3d78b37055a6a 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Evoker.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Evoker.java
@@ -68,6 +68,11 @@ public class Evoker extends SpellcasterIllager {
     public void initAttributes() {
         this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(this.level.purpurConfig.evokerMaxHealth);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.evokerTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Ghast.java b/src/main/java/net/minecraft/world/entity/monster/Ghast.java
index 3cb9b399db596b90d7885e2003ba41f4f79a3588..8ab5dfd2f56d52b275bf160d8a28adce5564a5f2 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Ghast.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Ghast.java
@@ -81,6 +81,11 @@ public class Ghast extends FlyingMob implements Enemy {
     public void initAttributes() {
         this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(this.level.purpurConfig.ghastMaxHealth);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.ghastTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Giant.java b/src/main/java/net/minecraft/world/entity/monster/Giant.java
index ed032918fb33d60c2d60d4db9275dddf88dd72d9..148ad9bc34793e6ed2b4b02aff6f239321504268 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Giant.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Giant.java
@@ -107,6 +107,11 @@ public class Giant extends Monster {
         // 1.0 makes bottom of feet about as high as their waist when they jump
         return level.purpurConfig.giantJumpHeight;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.giantTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Guardian.java b/src/main/java/net/minecraft/world/entity/monster/Guardian.java
index aad07e8af58158079b0e54e759a08c735af91a40..96c3dc4764a12f8af2abfd3125e29a86e86da92b 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Guardian.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Guardian.java
@@ -97,6 +97,11 @@ public class Guardian extends Monster {
     public void initAttributes() {
         this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(this.level.purpurConfig.guardianMaxHealth);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.guardianTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Husk.java b/src/main/java/net/minecraft/world/entity/monster/Husk.java
index 22daf7d11890a2e9276928ac9b242edf932e11cb..47e4f62d177c14ceffeb13a3fee5bfa342da7184 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Husk.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Husk.java
@@ -62,6 +62,11 @@ public class Husk extends Zombie {
     public boolean jockeyTryExistingChickens() {
         return level.purpurConfig.huskJockeyTryExistingChickens;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.huskTakeDamageFromWater;
+    }
     // Purpur end
 
     public static boolean checkHuskSpawnRules(EntityType<Husk> type, ServerLevelAccessor world, MobSpawnType spawnReason, BlockPos pos, RandomSource random) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Illusioner.java b/src/main/java/net/minecraft/world/entity/monster/Illusioner.java
index 171e2fef10ac75dd4585a82057edb4452a6f0d22..5b6a61fb2b44ea4dec4767958a2abe57d758646e 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Illusioner.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Illusioner.java
@@ -81,6 +81,11 @@ public class Illusioner extends SpellcasterIllager implements RangedAttackMob {
         this.getAttribute(Attributes.FOLLOW_RANGE).setBaseValue(this.level.purpurConfig.illusionerFollowRange);
         this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(this.level.purpurConfig.illusionerMaxHealth);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.illusionerTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/MagmaCube.java b/src/main/java/net/minecraft/world/entity/monster/MagmaCube.java
index 69375fdb63b9edde3d161bac7a1946a36306f0c5..5311b26e56eac2a854e615a3e694eadd9520cc1c 100644
--- a/src/main/java/net/minecraft/world/entity/monster/MagmaCube.java
+++ b/src/main/java/net/minecraft/world/entity/monster/MagmaCube.java
@@ -65,6 +65,11 @@ public class MagmaCube extends Slime {
     protected java.util.Map<Integer, Double> getAttackDamageCache() {
         return level.purpurConfig.magmaCubeAttackDamageCache;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.magmaCubeTakeDamageFromWater;
+    }
     // Purpur end
 
     public static AttributeSupplier.Builder createAttributes() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Phantom.java b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
index f23ca987666fd23621d3d731fd1a4ab26ff04aa8..f7689ba01ec6d7f3483be831026e0c5f995459e9 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Phantom.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
@@ -151,6 +151,11 @@ public class Phantom extends FlyingMob implements Enemy {
     public boolean isCirclingCrystal() {
         return crystalPosition != null;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.phantomTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Pillager.java b/src/main/java/net/minecraft/world/entity/monster/Pillager.java
index 13c0c270dc56f0e3d6e60714a3b9abeb6413c74f..d2dc2b73692ddf28272b1196a6ed718f2f14e116 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Pillager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Pillager.java
@@ -83,6 +83,11 @@ public class Pillager extends AbstractIllager implements CrossbowAttackMob, Inve
     public void initAttributes() {
         this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(this.level.purpurConfig.pillagerMaxHealth);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.pillagerTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Ravager.java b/src/main/java/net/minecraft/world/entity/monster/Ravager.java
index 570b3cbfc66f762999eaec57109ec11c995707b2..ca14d2702f6a4b5c1be2a24a146723232a2d19ef 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Ravager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Ravager.java
@@ -95,6 +95,11 @@ public class Ravager extends Raider {
     public void initAttributes() {
         this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(this.level.purpurConfig.ravagerMaxHealth);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.ravagerTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Shulker.java b/src/main/java/net/minecraft/world/entity/monster/Shulker.java
index 9cc44ccd584253cb16a19e7a4747ef39a3ae82f5..2abdeb351fbabec7490c1ce806cebf8886b6be61 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Shulker.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Shulker.java
@@ -112,6 +112,11 @@ public class Shulker extends AbstractGolem implements Enemy {
     public void initAttributes() {
         this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(this.level.purpurConfig.shulkerMaxHealth);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.shulkerTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Silverfish.java b/src/main/java/net/minecraft/world/entity/monster/Silverfish.java
index 45aab92a976ac4c7e1f9b066119f0b4a7188a8f7..6b418728d56f6a3f0dff669a115de49f942a5ce4 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Silverfish.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Silverfish.java
@@ -62,6 +62,11 @@ public class Silverfish extends Monster {
     public void initAttributes() {
         this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(this.level.purpurConfig.silverfishMaxHealth);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.silverfishTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Skeleton.java b/src/main/java/net/minecraft/world/entity/monster/Skeleton.java
index e239bcc4d4afe48e9fc204ad38d8bc76833994f4..8ce46cc00a01a678270e906078097aa717abdc41 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Skeleton.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Skeleton.java
@@ -45,6 +45,11 @@ public class Skeleton extends AbstractSkeleton {
     public void initAttributes() {
         this.getAttribute(net.minecraft.world.entity.ai.attributes.Attributes.MAX_HEALTH).setBaseValue(this.level.purpurConfig.skeletonMaxHealth);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.skeletonTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Slime.java b/src/main/java/net/minecraft/world/entity/monster/Slime.java
index 5146ae55c6c486d5a6619a0f30e41e07988faf95..efe072c4452857aad31ed87c519502078b62f61b 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Slime.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Slime.java
@@ -134,6 +134,11 @@ public class Slime extends Mob implements Enemy {
         }
         return value;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.slimeTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Spider.java b/src/main/java/net/minecraft/world/entity/monster/Spider.java
index 9b35fe2b335ba1b835f41401162c8c55fd1cc31e..12e25f1cf9daeecd46788959227910b328091a43 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Spider.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Spider.java
@@ -71,6 +71,11 @@ public class Spider extends Monster {
     public void initAttributes() {
         this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(this.level.purpurConfig.spiderMaxHealth);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.spiderTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Stray.java b/src/main/java/net/minecraft/world/entity/monster/Stray.java
index e7f0807cc4e57c99bbd0debaebb3b9f6243c591c..703d997e22ea24a93d054d72ca914f8a5a8cdc0a 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Stray.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Stray.java
@@ -41,6 +41,11 @@ public class Stray extends AbstractSkeleton {
     public void initAttributes() {
         this.getAttribute(net.minecraft.world.entity.ai.attributes.Attributes.MAX_HEALTH).setBaseValue(this.level.purpurConfig.strayMaxHealth);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.strayTakeDamageFromWater;
+    }
     // Purpur end
 
     public static boolean checkStraySpawnRules(EntityType<Stray> type, ServerLevelAccessor world, MobSpawnType spawnReason, BlockPos pos, RandomSource random) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Strider.java b/src/main/java/net/minecraft/world/entity/monster/Strider.java
index df9d16a6493a57b6034cd56bf8dbe38fe7c5cda1..0ac4a2b6ec9c88e8049a8a1cd0518e14e4b08ede 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Strider.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Strider.java
@@ -90,7 +90,7 @@ public class Strider extends Animal implements ItemSteerable, Saddleable {
         super(type, world);
         this.steering = new ItemBasedSteering(this.entityData, Strider.DATA_BOOST_TIME, Strider.DATA_SADDLE_ID);
         this.blocksBuilding = true;
-        this.setPathfindingMalus(BlockPathTypes.WATER, -1.0F);
+        if (isSensitiveToWater()) this.setPathfindingMalus(BlockPathTypes.WATER, -1.0F); // Purpur
         this.setPathfindingMalus(BlockPathTypes.LAVA, 0.0F);
         this.setPathfindingMalus(BlockPathTypes.DANGER_FIRE, 0.0F);
         this.setPathfindingMalus(BlockPathTypes.DAMAGE_FIRE, 0.0F);
@@ -414,7 +414,7 @@ public class Strider extends Animal implements ItemSteerable, Saddleable {
 
     @Override
     public boolean isSensitiveToWater() {
-        return true;
+        return this.level.purpurConfig.striderTakeDamageFromWater; // Purpur
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Vex.java b/src/main/java/net/minecraft/world/entity/monster/Vex.java
index cad3d3741460c21da2e163ed9ec6ba7894ab2712..1e4f227ad895f2099d889c3b9317176449675af1 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Vex.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Vex.java
@@ -106,6 +106,11 @@ public class Vex extends Monster {
     public void initAttributes() {
         this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(this.level.purpurConfig.vexMaxHealth);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.vexTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Vindicator.java b/src/main/java/net/minecraft/world/entity/monster/Vindicator.java
index 021550a0465dd1fd152b4c2e763014058730e8ca..b9b2e76535da32965615de563d4674cee4abd7f0 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Vindicator.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Vindicator.java
@@ -78,6 +78,11 @@ public class Vindicator extends AbstractIllager {
     public void initAttributes() {
         this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(this.level.purpurConfig.vindicatorMaxHealth);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.vindicatorTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Witch.java b/src/main/java/net/minecraft/world/entity/monster/Witch.java
index c4ee1bca68b26403b6671c8c5f7fc3f037ad1128..e6a3da524b8d6f776d541d1ae46f572c4f12d785 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Witch.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Witch.java
@@ -76,6 +76,11 @@ public class Witch extends Raider implements RangedAttackMob {
     public void initAttributes() {
         this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(this.level.purpurConfig.witchMaxHealth);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.witchTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/WitherSkeleton.java b/src/main/java/net/minecraft/world/entity/monster/WitherSkeleton.java
index b374069a1e88db67a56d6d5f9e05318c0403d462..dd47abc25f71ad019025e11bdf9f5ca97c2c78f3 100644
--- a/src/main/java/net/minecraft/world/entity/monster/WitherSkeleton.java
+++ b/src/main/java/net/minecraft/world/entity/monster/WitherSkeleton.java
@@ -55,6 +55,11 @@ public class WitherSkeleton extends AbstractSkeleton {
     public void initAttributes() {
         this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(this.level.purpurConfig.witherSkeletonMaxHealth);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.witherSkeletonTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zoglin.java b/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
index 6236a557d2a73dff70141140f79faf851a2062f0..0d8495a73df5b1b6cd2c7e5cf18cb3eb15bbb729 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zoglin.java
@@ -88,6 +88,11 @@ public class Zoglin extends Monster implements Enemy, HoglinBase {
     public void initAttributes() {
         this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(this.level.purpurConfig.zoglinMaxHealth);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.zoglinTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zombie.java b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
index efe74738b5a90f822901488aa99f981029416fb5..f2900d76e9577c83be377500f7d7e7f438a56683 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zombie.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
@@ -137,6 +137,11 @@ public class Zombie extends Monster {
     public boolean jockeyTryExistingChickens() {
         return level.purpurConfig.zombieJockeyTryExistingChickens;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.zombieTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java b/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
index 6e25ec59c6b15f8a6ed313bbf8c5472744c81e15..aed21936435edcc83c8da714910132157fa57aa6 100644
--- a/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
@@ -118,6 +118,11 @@ public class ZombieVillager extends Zombie implements VillagerDataHolder {
     public boolean jockeyTryExistingChickens() {
         return level.purpurConfig.zombieVillagerJockeyTryExistingChickens;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.zombieVillagerTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java b/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
index 1f0003fb08a45af02e6d38e28fa548abe480426b..ad5197636e367f863ca3d044dd343ae5ae722cc2 100644
--- a/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
@@ -94,6 +94,11 @@ public class ZombifiedPiglin extends Zombie implements NeutralMob {
     public boolean jockeyTryExistingChickens() {
         return level.purpurConfig.zombifiedPiglinJockeyTryExistingChickens;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.zombifiedPiglinTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
index c335a32832c6eef95658fbf632b943bb10ac44b0..68cb79ad43a11195eb2245f6d9081212c7adb0dd 100644
--- a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
@@ -92,6 +92,11 @@ public class Hoglin extends Animal implements Enemy, HoglinBase {
     public int getPurpurBreedTime() {
         return this.level.purpurConfig.hoglinBreedingTicks;
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.hoglinTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
index 592a1a95b4cdfd731574299d2096f279f99b59f7..52655c0e78673e8194276af665c13030f92201e2 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
@@ -115,6 +115,11 @@ public class Piglin extends AbstractPiglin implements CrossbowAttackMob, Invento
     public void initAttributes() {
         this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(this.level.purpurConfig.piglinMaxHealth);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.piglinTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
index 75db61c5aab66234b26f7899229ddca8896e2086..a44f9a59fbec146df95d89c26df12efb79f6179a 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinBrute.java
@@ -61,6 +61,11 @@ public class PiglinBrute extends AbstractPiglin {
     public void initAttributes() {
         this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(this.level.purpurConfig.piglinBruteMaxHealth);
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.piglinBruteTakeDamageFromWater;
+    }
     // Purpur end
 
     public static AttributeSupplier.Builder createAttributes() {
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index 73bb73cf0f0a20d0218f4080f547e279613f14bf..373f74742323367c7fa1984313c99c42c253cfa9 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -188,6 +188,11 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     public boolean canBeLeashed(Player player) {
         return level.purpurConfig.villagerCanBeLeashed && !this.isLeashed();
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.villagerTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java b/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
index 8756e0d8d0077308f5fb74bf45fe093d0f043c99..6dd8856816bebb2766203589048cc68b3f5c8f5c 100644
--- a/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
+++ b/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
@@ -91,6 +91,11 @@ public class WanderingTrader extends net.minecraft.world.entity.npc.AbstractVill
     public boolean canBeLeashed(Player player) {
         return level.purpurConfig.wanderingTraderCanBeLeashed && !this.isLeashed();
     }
+
+    @Override
+    public boolean isSensitiveToWater() {
+        return this.level.purpurConfig.wanderingTraderTakeDamageFromWater;
+    }
     // Purpur end
 
     @Override
diff --git a/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java b/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java
index bb1127f369de525430687ec1dc46cc56b5df7fc7..4e4a625fe34913d89bd933eeae15944ecba0df8a 100644
--- a/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java
+++ b/src/main/java/org/purpurmc/purpur/PurpurWorldConfig.java
@@ -569,11 +569,13 @@ public class PurpurWorldConfig {
     public boolean axolotlControllable = true;
     public double axolotlMaxHealth = 14.0D;
     public int axolotlBreedingTicks = 6000;
+    public boolean axolotlTakeDamageFromWater = false;
     private void axolotlSettings() {
         axolotlRidable = getBoolean("mobs.axolotl.ridable", axolotlRidable);
         axolotlControllable = getBoolean("mobs.axolotl.controllable", axolotlControllable);
         axolotlMaxHealth = getDouble("mobs.axolotl.attributes.max_health", axolotlMaxHealth);
         axolotlBreedingTicks = getInt("mobs.axolotl.breeding-delay-ticks", axolotlBreedingTicks);
+        axolotlTakeDamageFromWater = getBoolean("mobs.axolotl.takes-damage-from-water", axolotlTakeDamageFromWater);
     }
 
     public boolean batRidable = false;
@@ -588,6 +590,7 @@ public class PurpurWorldConfig {
     public double batArmor = 0.0D;
     public double batArmorToughness = 0.0D;
     public double batAttackKnockback = 0.0D;
+    public boolean batTakeDamageFromWater = false;
     private void batSettings() {
         batRidable = getBoolean("mobs.bat.ridable", batRidable);
         batRidableInWater = getBoolean("mobs.bat.ridable-in-water", batRidableInWater);
@@ -599,6 +602,7 @@ public class PurpurWorldConfig {
             set("mobs.bat.attributes.max_health", oldValue);
         }
         batMaxHealth = getDouble("mobs.bat.attributes.max_health", batMaxHealth);
+        batTakeDamageFromWater = getBoolean("mobs.bat.takes-damage-from-water", batTakeDamageFromWater);
     }
 
     public boolean beeRidable = false;
@@ -607,6 +611,7 @@ public class PurpurWorldConfig {
     public double beeMaxY = 320D;
     public double beeMaxHealth = 10.0D;
     public int beeBreedingTicks = 6000;
+    public boolean beeTakeDamageFromWater = false;
     private void beeSettings() {
         beeRidable = getBoolean("mobs.bee.ridable", beeRidable);
         beeRidableInWater = getBoolean("mobs.bee.ridable-in-water", beeRidableInWater);
@@ -619,6 +624,7 @@ public class PurpurWorldConfig {
         }
         beeMaxHealth = getDouble("mobs.bee.attributes.max_health", beeMaxHealth);
         beeBreedingTicks = getInt("mobs.bee.breeding-delay-ticks", beeBreedingTicks);
+        beeTakeDamageFromWater = getBoolean("mobs.bee.takes-damage-from-water", beeTakeDamageFromWater);
     }
 
     public boolean blazeRidable = false;
@@ -626,6 +632,7 @@ public class PurpurWorldConfig {
     public boolean blazeControllable = true;
     public double blazeMaxY = 320D;
     public double blazeMaxHealth = 20.0D;
+    public boolean blazeTakeDamageFromWater = true;
     private void blazeSettings() {
         blazeRidable = getBoolean("mobs.blaze.ridable", blazeRidable);
         blazeRidableInWater = getBoolean("mobs.blaze.ridable-in-water", blazeRidableInWater);
@@ -637,6 +644,7 @@ public class PurpurWorldConfig {
             set("mobs.blaze.attributes.max_health", oldValue);
         }
         blazeMaxHealth = getDouble("mobs.blaze.attributes.max_health", blazeMaxHealth);
+        blazeTakeDamageFromWater = getBoolean("mobs.blaze.takes-damage-from-water", blazeTakeDamageFromWater);
     }
 
     public boolean catRidable = false;
@@ -648,6 +656,7 @@ public class PurpurWorldConfig {
     public int catSpawnVillageScanRange = 48;
     public int catBreedingTicks = 6000;
     public DyeColor catDefaultCollarColor = DyeColor.RED;
+    public boolean catTakeDamageFromWater = false;
     private void catSettings() {
         catRidable = getBoolean("mobs.cat.ridable", catRidable);
         catRidableInWater = getBoolean("mobs.cat.ridable-in-water", catRidableInWater);
@@ -667,12 +676,14 @@ public class PurpurWorldConfig {
         } catch (IllegalArgumentException ignore) {
             catDefaultCollarColor = DyeColor.RED;
         }
+        catTakeDamageFromWater = getBoolean("mobs.cat.takes-damage-from-water", catTakeDamageFromWater);
     }
 
     public boolean caveSpiderRidable = false;
     public boolean caveSpiderRidableInWater = false;
     public boolean caveSpiderControllable = true;
     public double caveSpiderMaxHealth = 12.0D;
+    public boolean caveSpiderTakeDamageFromWater = false;
     private void caveSpiderSettings() {
         caveSpiderRidable = getBoolean("mobs.cave_spider.ridable", caveSpiderRidable);
         caveSpiderRidableInWater = getBoolean("mobs.cave_spider.ridable-in-water", caveSpiderRidableInWater);
@@ -683,6 +694,7 @@ public class PurpurWorldConfig {
             set("mobs.cave_spider.attributes.max_health", oldValue);
         }
         caveSpiderMaxHealth = getDouble("mobs.cave_spider.attributes.max_health", caveSpiderMaxHealth);
+        caveSpiderTakeDamageFromWater = getBoolean("mobs.cave_spider.takes-damage-from-water", caveSpiderTakeDamageFromWater);
     }
 
     public boolean chickenRidable = false;
@@ -691,6 +703,7 @@ public class PurpurWorldConfig {
     public double chickenMaxHealth = 4.0D;
     public boolean chickenRetaliate = false;
     public int chickenBreedingTicks = 6000;
+    public boolean chickenTakeDamageFromWater = false;
     private void chickenSettings() {
         chickenRidable = getBoolean("mobs.chicken.ridable", chickenRidable);
         chickenRidableInWater = getBoolean("mobs.chicken.ridable-in-water", chickenRidableInWater);
@@ -703,11 +716,13 @@ public class PurpurWorldConfig {
         chickenMaxHealth = getDouble("mobs.chicken.attributes.max_health", chickenMaxHealth);
         chickenRetaliate = getBoolean("mobs.chicken.retaliate", chickenRetaliate);
         chickenBreedingTicks = getInt("mobs.chicken.breeding-delay-ticks", chickenBreedingTicks);
+        chickenTakeDamageFromWater = getBoolean("mobs.chicken.takes-damage-from-water", chickenTakeDamageFromWater);
     }
 
     public boolean codRidable = false;
     public boolean codControllable = true;
     public double codMaxHealth = 3.0D;
+    public boolean codTakeDamageFromWater = false;
     private void codSettings() {
         codRidable = getBoolean("mobs.cod.ridable", codRidable);
         codControllable = getBoolean("mobs.cod.controllable", codControllable);
@@ -717,6 +732,7 @@ public class PurpurWorldConfig {
             set("mobs.cod.attributes.max_health", oldValue);
         }
         codMaxHealth = getDouble("mobs.cod.attributes.max_health", codMaxHealth);
+        codTakeDamageFromWater = getBoolean("mobs.cod.takes-damage-from-water", codTakeDamageFromWater);
     }
 
     public boolean cowRidable = false;
@@ -725,6 +741,7 @@ public class PurpurWorldConfig {
     public double cowMaxHealth = 10.0D;
     public int cowFeedMushrooms = 0;
     public int cowBreedingTicks = 6000;
+    public boolean cowTakeDamageFromWater = false;
     private void cowSettings() {
         cowRidable = getBoolean("mobs.cow.ridable", cowRidable);
         cowRidableInWater = getBoolean("mobs.cow.ridable-in-water", cowRidableInWater);
@@ -737,6 +754,7 @@ public class PurpurWorldConfig {
         cowMaxHealth = getDouble("mobs.cow.attributes.max_health", cowMaxHealth);
         cowFeedMushrooms = getInt("mobs.cow.feed-mushrooms-for-mooshroom", cowFeedMushrooms);
         cowBreedingTicks = getInt("mobs.cow.breeding-delay-ticks", cowBreedingTicks);
+        cowTakeDamageFromWater = getBoolean("mobs.cow.takes-damage-from-water", cowTakeDamageFromWater);
     }
 
     public boolean creeperRidable = false;
@@ -746,6 +764,7 @@ public class PurpurWorldConfig {
     public double creeperChargedChance = 0.0D;
     public boolean creeperAllowGriefing = true;
     public boolean creeperBypassMobGriefing = false;
+    public boolean creeperTakeDamageFromWater = false;
     private void creeperSettings() {
         creeperRidable = getBoolean("mobs.creeper.ridable", creeperRidable);
         creeperRidableInWater = getBoolean("mobs.creeper.ridable-in-water", creeperRidableInWater);
@@ -759,6 +778,7 @@ public class PurpurWorldConfig {
         creeperChargedChance = getDouble("mobs.creeper.naturally-charged-chance", creeperChargedChance);
         creeperAllowGriefing = getBoolean("mobs.creeper.allow-griefing", creeperAllowGriefing);
         creeperBypassMobGriefing = getBoolean("mobs.creeper.bypass-mob-griefing", creeperBypassMobGriefing);
+        creeperTakeDamageFromWater = getBoolean("mobs.creeper.takes-damage-from-water", creeperTakeDamageFromWater);
     }
 
     public boolean dolphinRidable = false;
@@ -768,6 +788,7 @@ public class PurpurWorldConfig {
     public float dolphinSpitDamage = 2.0F;
     public double dolphinMaxHealth = 10.0D;
     public boolean dolphinDisableTreasureSearching = false;
+    public boolean dolphinTakeDamageFromWater = false;
     private void dolphinSettings() {
         dolphinRidable = getBoolean("mobs.dolphin.ridable", dolphinRidable);
         dolphinControllable = getBoolean("mobs.dolphin.controllable", dolphinControllable);
@@ -781,6 +802,7 @@ public class PurpurWorldConfig {
         }
         dolphinMaxHealth = getDouble("mobs.dolphin.attributes.max_health", dolphinMaxHealth);
         dolphinDisableTreasureSearching = getBoolean("mobs.dolphin.disable-treasure-searching", dolphinDisableTreasureSearching);
+        dolphinTakeDamageFromWater = getBoolean("mobs.dolphin.takes-damage-from-water", dolphinTakeDamageFromWater);
     }
 
     public boolean donkeyRidableInWater = false;
@@ -791,6 +813,7 @@ public class PurpurWorldConfig {
     public double donkeyMovementSpeedMin = 0.175D;
     public double donkeyMovementSpeedMax = 0.175D;
     public int donkeyBreedingTicks = 6000;
+    public boolean donkeyTakeDamageFromWater = false;
     private void donkeySettings() {
         donkeyRidableInWater = getBoolean("mobs.donkey.ridable-in-water", donkeyRidableInWater);
         if (PurpurConfig.version < 10) {
@@ -807,6 +830,7 @@ public class PurpurWorldConfig {
         donkeyMovementSpeedMin = getDouble("mobs.donkey.attributes.movement_speed.min", donkeyMovementSpeedMin);
         donkeyMovementSpeedMax = getDouble("mobs.donkey.attributes.movement_speed.max", donkeyMovementSpeedMax);
         donkeyBreedingTicks = getInt("mobs.donkey.breeding-delay-ticks", donkeyBreedingTicks);
+        donkeyTakeDamageFromWater = getBoolean("mobs.donkey.takes-damage-from-water", donkeyTakeDamageFromWater);
     }
 
     public boolean drownedRidable = false;
@@ -817,6 +841,7 @@ public class PurpurWorldConfig {
     public boolean drownedJockeyOnlyBaby = true;
     public double drownedJockeyChance = 0.05D;
     public boolean drownedJockeyTryExistingChickens = true;
+    public boolean drownedTakeDamageFromWater = false;
     private void drownedSettings() {
         drownedRidable = getBoolean("mobs.drowned.ridable", drownedRidable);
         drownedRidableInWater = getBoolean("mobs.drowned.ridable-in-water", drownedRidableInWater);
@@ -831,11 +856,13 @@ public class PurpurWorldConfig {
         drownedJockeyOnlyBaby = getBoolean("mobs.drowned.jockey.only-babies", drownedJockeyOnlyBaby);
         drownedJockeyChance = getDouble("mobs.drowned.jockey.chance", drownedJockeyChance);
         drownedJockeyTryExistingChickens = getBoolean("mobs.drowned.jockey.try-existing-chickens", drownedJockeyTryExistingChickens);
+        drownedTakeDamageFromWater = getBoolean("mobs.drowned.takes-damage-from-water", drownedTakeDamageFromWater);
     }
 
     public boolean elderGuardianRidable = false;
     public boolean elderGuardianControllable = true;
     public double elderGuardianMaxHealth = 80.0D;
+    public boolean elderGuardianTakeDamageFromWater = false;
     private void elderGuardianSettings() {
         elderGuardianRidable = getBoolean("mobs.elder_guardian.ridable", elderGuardianRidable);
         elderGuardianControllable = getBoolean("mobs.elder_guardian.controllable", elderGuardianControllable);
@@ -845,6 +872,7 @@ public class PurpurWorldConfig {
             set("mobs.elder_guardian.attributes.max_health", oldValue);
         }
         elderGuardianMaxHealth = getDouble("mobs.elder_guardian.attributes.max_health", elderGuardianMaxHealth);
+        elderGuardianTakeDamageFromWater = getBoolean("mobs.elder_guardian.takes-damage-from-water", elderGuardianTakeDamageFromWater);
     }
 
     public boolean enderDragonRidable = false;
@@ -854,6 +882,7 @@ public class PurpurWorldConfig {
     public double enderDragonMaxHealth = 200.0D;
     public boolean enderDragonAlwaysDropsFullExp = false;
     public boolean enderDragonBypassMobGriefing = false;
+    public boolean enderDragonTakeDamageFromWater = false;
     private void enderDragonSettings() {
         enderDragonRidable = getBoolean("mobs.ender_dragon.ridable", enderDragonRidable);
         enderDragonRidableInWater = getBoolean("mobs.ender_dragon.ridable-in-water", enderDragonRidableInWater);
@@ -871,6 +900,7 @@ public class PurpurWorldConfig {
         enderDragonMaxHealth = getDouble("mobs.ender_dragon.attributes.max_health", enderDragonMaxHealth);
         enderDragonAlwaysDropsFullExp = getBoolean("mobs.ender_dragon.always-drop-full-exp", enderDragonAlwaysDropsFullExp);
         enderDragonBypassMobGriefing = getBoolean("mobs.ender_dragon.bypass-mob-griefing", enderDragonBypassMobGriefing);
+        enderDragonTakeDamageFromWater = getBoolean("mobs.ender_dragon.takes-damage-from-water", enderDragonTakeDamageFromWater);
     }
 
     public boolean endermanRidable = false;
@@ -880,6 +910,7 @@ public class PurpurWorldConfig {
     public boolean endermanAllowGriefing = true;
     public boolean endermanDespawnEvenWithBlock = false;
     public boolean endermanBypassMobGriefing = false;
+    public boolean endermanTakeDamageFromWater = true;
     private void endermanSettings() {
         endermanRidable = getBoolean("mobs.enderman.ridable", endermanRidable);
         endermanRidableInWater = getBoolean("mobs.enderman.ridable-in-water", endermanRidableInWater);
@@ -893,12 +924,14 @@ public class PurpurWorldConfig {
         endermanAllowGriefing = getBoolean("mobs.enderman.allow-griefing", endermanAllowGriefing);
         endermanDespawnEvenWithBlock = getBoolean("mobs.enderman.can-despawn-with-held-block", endermanDespawnEvenWithBlock);
         endermanBypassMobGriefing = getBoolean("mobs.enderman.bypass-mob-griefing", endermanBypassMobGriefing);
+        endermanTakeDamageFromWater = getBoolean("mobs.enderman.takes-damage-from-water", endermanTakeDamageFromWater);
     }
 
     public boolean endermiteRidable = false;
     public boolean endermiteRidableInWater = false;
     public boolean endermiteControllable = true;
     public double endermiteMaxHealth = 8.0D;
+    public boolean endermiteTakeDamageFromWater = false;
     private void endermiteSettings() {
         endermiteRidable = getBoolean("mobs.endermite.ridable", endermiteRidable);
         endermiteRidableInWater = getBoolean("mobs.endermite.ridable-in-water", endermiteRidableInWater);
@@ -909,6 +942,7 @@ public class PurpurWorldConfig {
             set("mobs.endermite.attributes.max_health", oldValue);
         }
         endermiteMaxHealth = getDouble("mobs.endermite.attributes.max_health", endermiteMaxHealth);
+        endermiteTakeDamageFromWater = getBoolean("mobs.endermite.takes-damage-from-water", endermiteTakeDamageFromWater);
     }
 
     public boolean evokerRidable = false;
@@ -916,6 +950,7 @@ public class PurpurWorldConfig {
     public boolean evokerControllable = true;
     public double evokerMaxHealth = 24.0D;
     public boolean evokerBypassMobGriefing = false;
+    public boolean evokerTakeDamageFromWater = false;
     private void evokerSettings() {
         evokerRidable = getBoolean("mobs.evoker.ridable", evokerRidable);
         evokerRidableInWater = getBoolean("mobs.evoker.ridable-in-water", evokerRidableInWater);
@@ -927,6 +962,7 @@ public class PurpurWorldConfig {
         }
         evokerMaxHealth = getDouble("mobs.evoker.attributes.max_health", evokerMaxHealth);
         evokerBypassMobGriefing = getBoolean("mobs.evoker.bypass-mob-griefing", evokerBypassMobGriefing);
+        evokerTakeDamageFromWater = getBoolean("mobs.evoker.takes-damage-from-water", evokerTakeDamageFromWater);
     }
 
     public boolean foxRidable = false;
@@ -936,6 +972,7 @@ public class PurpurWorldConfig {
     public boolean foxTypeChangesWithTulips = false;
     public int foxBreedingTicks = 6000;
     public boolean foxBypassMobGriefing = false;
+    public boolean foxTakeDamageFromWater = false;
     private void foxSettings() {
         foxRidable = getBoolean("mobs.fox.ridable", foxRidable);
         foxRidableInWater = getBoolean("mobs.fox.ridable-in-water", foxRidableInWater);
@@ -949,6 +986,7 @@ public class PurpurWorldConfig {
         foxTypeChangesWithTulips = getBoolean("mobs.fox.tulips-change-type", foxTypeChangesWithTulips);
         foxBreedingTicks = getInt("mobs.fox.breeding-delay-ticks", foxBreedingTicks);
         foxBypassMobGriefing = getBoolean("mobs.fox.bypass-mob-griefing", foxBypassMobGriefing);
+        foxTakeDamageFromWater = getBoolean("mobs.fox.takes-damage-from-water", foxTakeDamageFromWater);
     }
 
     public boolean frogRidable = false;
@@ -969,6 +1007,7 @@ public class PurpurWorldConfig {
     public boolean ghastControllable = true;
     public double ghastMaxY = 320D;
     public double ghastMaxHealth = 10.0D;
+    public boolean ghastTakeDamageFromWater = false;
     private void ghastSettings() {
         ghastRidable = getBoolean("mobs.ghast.ridable", ghastRidable);
         ghastRidableInWater = getBoolean("mobs.ghast.ridable-in-water", ghastRidableInWater);
@@ -980,6 +1019,7 @@ public class PurpurWorldConfig {
             set("mobs.ghast.attributes.max_health", oldValue);
         }
         ghastMaxHealth = getDouble("mobs.ghast.attributes.max_health", ghastMaxHealth);
+        ghastTakeDamageFromWater = getBoolean("mobs.ghast.takes-damage-from-water", ghastTakeDamageFromWater);
     }
 
     public boolean giantRidable = false;
@@ -992,6 +1032,7 @@ public class PurpurWorldConfig {
     public float giantJumpHeight = 1.0F;
     public boolean giantHaveAI = false;
     public boolean giantHaveHostileAI = false;
+    public boolean giantTakeDamageFromWater = false;
     private void giantSettings() {
         giantRidable = getBoolean("mobs.giant.ridable", giantRidable);
         giantRidableInWater = getBoolean("mobs.giant.ridable-in-water", giantRidableInWater);
@@ -1012,17 +1053,20 @@ public class PurpurWorldConfig {
         giantJumpHeight = (float) getDouble("mobs.giant.jump-height", giantJumpHeight);
         giantHaveAI = getBoolean("mobs.giant.have-ai", giantHaveAI);
         giantHaveHostileAI = getBoolean("mobs.giant.have-hostile-ai", giantHaveHostileAI);
+        giantTakeDamageFromWater = getBoolean("mobs.giant.takes-damage-from-water", giantTakeDamageFromWater);
     }
 
     public boolean glowSquidRidable = false;
     public boolean glowSquidControllable = true;
     public double glowSquidMaxHealth = 10.0D;
     public boolean glowSquidsCanFly = false;
+    public boolean glowSquidTakeDamageFromWater = false;
     private void glowSquidSettings() {
         glowSquidRidable = getBoolean("mobs.glow_squid.ridable", glowSquidRidable);
         glowSquidControllable = getBoolean("mobs.glow_squid.controllable", glowSquidControllable);
         glowSquidMaxHealth = getDouble("mobs.glow_squid.attributes.max_health", glowSquidMaxHealth);
         glowSquidsCanFly = getBoolean("mobs.glow_squid.can-fly", glowSquidsCanFly);
+        glowSquidTakeDamageFromWater = getBoolean("mobs.glow_squid.takes-damage-from-water", glowSquidTakeDamageFromWater);
     }
 
     public boolean goatRidable = false;
@@ -1030,17 +1074,20 @@ public class PurpurWorldConfig {
     public boolean goatControllable = true;
     public double goatMaxHealth = 10.0D;
     public int goatBreedingTicks = 6000;
+    public boolean goatTakeDamageFromWater = false;
     private void goatSettings() {
         goatRidable = getBoolean("mobs.goat.ridable", goatRidable);
         goatRidableInWater = getBoolean("mobs.goat.ridable-in-water", goatRidableInWater);
         goatControllable = getBoolean("mobs.goat.controllable", goatControllable);
         goatMaxHealth = getDouble("mobs.goat.attributes.max_health", goatMaxHealth);
         goatBreedingTicks = getInt("mobs.goat.breeding-delay-ticks", goatBreedingTicks);
+        goatTakeDamageFromWater = getBoolean("mobs.goat.takes-damage-from-water", goatTakeDamageFromWater);
     }
 
     public boolean guardianRidable = false;
     public boolean guardianControllable = true;
     public double guardianMaxHealth = 30.0D;
+    public boolean guardianTakeDamageFromWater = false;
     private void guardianSettings() {
         guardianRidable = getBoolean("mobs.guardian.ridable", guardianRidable);
         guardianControllable = getBoolean("mobs.guardian.controllable", guardianControllable);
@@ -1050,6 +1097,7 @@ public class PurpurWorldConfig {
             set("mobs.guardian.attributes.max_health", oldValue);
         }
         guardianMaxHealth = getDouble("mobs.guardian.attributes.max_health", guardianMaxHealth);
+        guardianTakeDamageFromWater = getBoolean("mobs.guardian.takes-damage-from-water", guardianTakeDamageFromWater);
     }
 
     public boolean hoglinRidable = false;
@@ -1057,6 +1105,7 @@ public class PurpurWorldConfig {
     public boolean hoglinControllable = true;
     public double hoglinMaxHealth = 40.0D;
     public int hoglinBreedingTicks = 6000;
+    public boolean hoglinTakeDamageFromWater = false;
     private void hoglinSettings() {
         hoglinRidable = getBoolean("mobs.hoglin.ridable", hoglinRidable);
         hoglinRidableInWater = getBoolean("mobs.hoglin.ridable-in-water", hoglinRidableInWater);
@@ -1068,6 +1117,7 @@ public class PurpurWorldConfig {
         }
         hoglinMaxHealth = getDouble("mobs.hoglin.attributes.max_health", hoglinMaxHealth);
         hoglinBreedingTicks = getInt("mobs.hoglin.breeding-delay-ticks", hoglinBreedingTicks);
+        hoglinTakeDamageFromWater = getBoolean("mobs.hoglin.takes-damage-from-water", hoglinTakeDamageFromWater);
     }
 
     public boolean horseRidableInWater = false;
@@ -1078,6 +1128,7 @@ public class PurpurWorldConfig {
     public double horseMovementSpeedMin = 0.1125D;
     public double horseMovementSpeedMax = 0.3375D;
     public int horseBreedingTicks = 6000;
+    public boolean horseTakeDamageFromWater = false;
     private void horseSettings() {
         horseRidableInWater = getBoolean("mobs.horse.ridable-in-water", horseRidableInWater);
         if (PurpurConfig.version < 10) {
@@ -1094,6 +1145,7 @@ public class PurpurWorldConfig {
         horseMovementSpeedMin = getDouble("mobs.horse.attributes.movement_speed.min", horseMovementSpeedMin);
         horseMovementSpeedMax = getDouble("mobs.horse.attributes.movement_speed.max", horseMovementSpeedMax);
         horseBreedingTicks = getInt("mobs.horse.breeding-delay-ticks", horseBreedingTicks);
+        horseTakeDamageFromWater = getBoolean("mobs.horse.takes-damage-from-water", horseTakeDamageFromWater);
     }
 
     public boolean huskRidable = false;
@@ -1104,6 +1156,7 @@ public class PurpurWorldConfig {
     public boolean huskJockeyOnlyBaby = true;
     public double huskJockeyChance = 0.05D;
     public boolean huskJockeyTryExistingChickens = true;
+    public boolean huskTakeDamageFromWater = false;
     private void huskSettings() {
         huskRidable = getBoolean("mobs.husk.ridable", huskRidable);
         huskRidableInWater = getBoolean("mobs.husk.ridable-in-water", huskRidableInWater);
@@ -1118,6 +1171,7 @@ public class PurpurWorldConfig {
         huskJockeyOnlyBaby = getBoolean("mobs.husk.jockey.only-babies", huskJockeyOnlyBaby);
         huskJockeyChance = getDouble("mobs.husk.jockey.chance", huskJockeyChance);
         huskJockeyTryExistingChickens = getBoolean("mobs.husk.jockey.try-existing-chickens", huskJockeyTryExistingChickens);
+        huskTakeDamageFromWater = getBoolean("mobs.husk.takes-damage-from-water", huskTakeDamageFromWater);
     }
 
     public boolean illusionerRidable = false;
@@ -1126,6 +1180,7 @@ public class PurpurWorldConfig {
     public double illusionerMovementSpeed = 0.5D;
     public double illusionerFollowRange = 18.0D;
     public double illusionerMaxHealth = 32.0D;
+    public boolean illusionerTakeDamageFromWater = false;
     private void illusionerSettings() {
         illusionerRidable = getBoolean("mobs.illusioner.ridable", illusionerRidable);
         illusionerRidableInWater = getBoolean("mobs.illusioner.ridable-in-water", illusionerRidableInWater);
@@ -1142,6 +1197,7 @@ public class PurpurWorldConfig {
             set("mobs.illusioner.attributes.max_health", oldValue);
         }
         illusionerMaxHealth = getDouble("mobs.illusioner.attributes.max_health", illusionerMaxHealth);
+        illusionerTakeDamageFromWater = getBoolean("mobs.illusioner.takes-damage-from-water", illusionerTakeDamageFromWater);
     }
 
     public boolean ironGolemRidable = false;
@@ -1149,6 +1205,7 @@ public class PurpurWorldConfig {
     public boolean ironGolemControllable = true;
     public boolean ironGolemCanSwim = false;
     public double ironGolemMaxHealth = 100.0D;
+    public boolean ironGolemTakeDamageFromWater = false;
     private void ironGolemSettings() {
         ironGolemRidable = getBoolean("mobs.iron_golem.ridable", ironGolemRidable);
         ironGolemRidableInWater = getBoolean("mobs.iron_golem.ridable-in-water", ironGolemRidableInWater);
@@ -1160,6 +1217,7 @@ public class PurpurWorldConfig {
             set("mobs.iron_golem.attributes.max_health", oldValue);
         }
         ironGolemMaxHealth = getDouble("mobs.iron_golem.attributes.max_health", ironGolemMaxHealth);
+        ironGolemTakeDamageFromWater = getBoolean("mobs.iron_golem.takes-damage-from-water", ironGolemTakeDamageFromWater);
     }
 
     public boolean llamaRidable = false;
@@ -1172,6 +1230,7 @@ public class PurpurWorldConfig {
     public double llamaMovementSpeedMin = 0.175D;
     public double llamaMovementSpeedMax = 0.175D;
     public int llamaBreedingTicks = 6000;
+    public boolean llamaTakeDamageFromWater = false;
     private void llamaSettings() {
         llamaRidable = getBoolean("mobs.llama.ridable", llamaRidable);
         llamaRidableInWater = getBoolean("mobs.llama.ridable-in-water", llamaRidableInWater);
@@ -1190,6 +1249,7 @@ public class PurpurWorldConfig {
         llamaMovementSpeedMin = getDouble("mobs.llama.attributes.movement_speed.min", llamaMovementSpeedMin);
         llamaMovementSpeedMax = getDouble("mobs.llama.attributes.movement_speed.max", llamaMovementSpeedMax);
         llamaBreedingTicks = getInt("mobs.llama.breeding-delay-ticks", llamaBreedingTicks);
+        llamaTakeDamageFromWater = getBoolean("mobs.llama.takes-damage-from-water", llamaTakeDamageFromWater);
     }
 
     public boolean magmaCubeRidable = false;
@@ -1199,6 +1259,7 @@ public class PurpurWorldConfig {
     public String magmaCubeAttackDamage = "size";
     public Map<Integer, Double> magmaCubeMaxHealthCache = new HashMap<>();
     public Map<Integer, Double> magmaCubeAttackDamageCache = new HashMap<>();
+    public boolean magmaCubeTakeDamageFromWater = false;
     private void magmaCubeSettings() {
         magmaCubeRidable = getBoolean("mobs.magma_cube.ridable", magmaCubeRidable);
         magmaCubeRidableInWater = getBoolean("mobs.magma_cube.ridable-in-water", magmaCubeRidableInWater);
@@ -1212,6 +1273,7 @@ public class PurpurWorldConfig {
         magmaCubeAttackDamage = getString("mobs.magma_cube.attributes.attack_damage", magmaCubeAttackDamage);
         magmaCubeMaxHealthCache.clear();
         magmaCubeAttackDamageCache.clear();
+        magmaCubeTakeDamageFromWater = getBoolean("mobs.magma_cube.takes-damage-from-water", magmaCubeTakeDamageFromWater);
     }
 
     public boolean mooshroomRidable = false;
@@ -1219,6 +1281,7 @@ public class PurpurWorldConfig {
     public boolean mooshroomControllable = true;
     public double mooshroomMaxHealth = 10.0D;
     public int mooshroomBreedingTicks = 6000;
+    public boolean mooshroomTakeDamageFromWater = false;
     private void mooshroomSettings() {
         mooshroomRidable = getBoolean("mobs.mooshroom.ridable", mooshroomRidable);
         mooshroomRidableInWater = getBoolean("mobs.mooshroom.ridable-in-water", mooshroomRidableInWater);
@@ -1230,6 +1293,7 @@ public class PurpurWorldConfig {
         }
         mooshroomMaxHealth = getDouble("mobs.mooshroom.attributes.max_health", mooshroomMaxHealth);
         mooshroomBreedingTicks = getInt("mobs.mooshroom.breeding-delay-ticks", mooshroomBreedingTicks);
+        mooshroomTakeDamageFromWater = getBoolean("mobs.mooshroom.takes-damage-from-water", mooshroomTakeDamageFromWater);
     }
 
     public boolean muleRidableInWater = false;
@@ -1240,6 +1304,7 @@ public class PurpurWorldConfig {
     public double muleMovementSpeedMin = 0.175D;
     public double muleMovementSpeedMax = 0.175D;
     public int muleBreedingTicks = 6000;
+    public boolean muleTakeDamageFromWater = false;
     private void muleSettings() {
         muleRidableInWater = getBoolean("mobs.mule.ridable-in-water", muleRidableInWater);
         if (PurpurConfig.version < 10) {
@@ -1256,6 +1321,7 @@ public class PurpurWorldConfig {
         muleMovementSpeedMin = getDouble("mobs.mule.attributes.movement_speed.min", muleMovementSpeedMin);
         muleMovementSpeedMax = getDouble("mobs.mule.attributes.movement_speed.max", muleMovementSpeedMax);
         muleBreedingTicks = getInt("mobs.mule.breeding-delay-ticks", muleBreedingTicks);
+        muleTakeDamageFromWater = getBoolean("mobs.mule.takes-damage-from-water", muleTakeDamageFromWater);
     }
 
     public boolean ocelotRidable = false;
@@ -1263,6 +1329,7 @@ public class PurpurWorldConfig {
     public boolean ocelotControllable = true;
     public double ocelotMaxHealth = 10.0D;
     public int ocelotBreedingTicks = 6000;
+    public boolean ocelotTakeDamageFromWater = false;
     private void ocelotSettings() {
         ocelotRidable = getBoolean("mobs.ocelot.ridable", ocelotRidable);
         ocelotRidableInWater = getBoolean("mobs.ocelot.ridable-in-water", ocelotRidableInWater);
@@ -1274,6 +1341,7 @@ public class PurpurWorldConfig {
         }
         ocelotMaxHealth = getDouble("mobs.ocelot.attributes.max_health", ocelotMaxHealth);
         ocelotBreedingTicks = getInt("mobs.ocelot.breeding-delay-ticks", ocelotBreedingTicks);
+        ocelotTakeDamageFromWater = getBoolean("mobs.ocelot.takes-damage-from-water", ocelotTakeDamageFromWater);
     }
 
     public boolean pandaRidable = false;
@@ -1281,6 +1349,7 @@ public class PurpurWorldConfig {
     public boolean pandaControllable = true;
     public double pandaMaxHealth = 20.0D;
     public int pandaBreedingTicks = 6000;
+    public boolean pandaTakeDamageFromWater = false;
     private void pandaSettings() {
         pandaRidable = getBoolean("mobs.panda.ridable", pandaRidable);
         pandaRidableInWater = getBoolean("mobs.panda.ridable-in-water", pandaRidableInWater);
@@ -1292,6 +1361,7 @@ public class PurpurWorldConfig {
         }
         pandaMaxHealth = getDouble("mobs.panda.attributes.max_health", pandaMaxHealth);
         pandaBreedingTicks = getInt("mobs.panda.breeding-delay-ticks", pandaBreedingTicks);
+        pandaTakeDamageFromWater = getBoolean("mobs.panda.takes-damage-from-water", pandaTakeDamageFromWater);
     }
 
     public boolean parrotRidable = false;
@@ -1299,6 +1369,7 @@ public class PurpurWorldConfig {
     public boolean parrotControllable = true;
     public double parrotMaxY = 320D;
     public double parrotMaxHealth = 6.0D;
+    public boolean parrotTakeDamageFromWater = false;
     private void parrotSettings() {
         parrotRidable = getBoolean("mobs.parrot.ridable", parrotRidable);
         parrotRidableInWater = getBoolean("mobs.parrot.ridable-in-water", parrotRidableInWater);
@@ -1310,6 +1381,7 @@ public class PurpurWorldConfig {
             set("mobs.parrot.attributes.max_health", oldValue);
         }
         parrotMaxHealth = getDouble("mobs.parrot.attributes.max_health", parrotMaxHealth);
+        parrotTakeDamageFromWater = getBoolean("mobs.parrot.takes-damage-from-water", parrotTakeDamageFromWater);
     }
 
     public boolean phantomRidable = false;
@@ -1342,6 +1414,7 @@ public class PurpurWorldConfig {
     public boolean phantomIgnorePlayersWithTorch = false;
     public boolean phantomBurnInDaylight = true;
     public boolean phantomFlamesOnSwoop = false;
+    public boolean phantomTakeDamageFromWater = false;
     private void phantomSettings() {
         phantomRidable = getBoolean("mobs.phantom.ridable", phantomRidable);
         phantomRidableInWater = getBoolean("mobs.phantom.ridable-in-water", phantomRidableInWater);
@@ -1382,6 +1455,7 @@ public class PurpurWorldConfig {
         phantomBurnInDaylight = getBoolean("mobs.phantom.burn-in-daylight", phantomBurnInDaylight);
         phantomIgnorePlayersWithTorch = getBoolean("mobs.phantom.ignore-players-with-torch", phantomIgnorePlayersWithTorch);
         phantomFlamesOnSwoop = getBoolean("mobs.phantom.flames-on-swoop", phantomFlamesOnSwoop);
+        phantomTakeDamageFromWater = getBoolean("mobs.phantom.takes-damage-from-water", phantomTakeDamageFromWater);
     }
 
     public boolean pigRidable = false;
@@ -1390,6 +1464,7 @@ public class PurpurWorldConfig {
     public double pigMaxHealth = 10.0D;
     public boolean pigGiveSaddleBack = false;
     public int pigBreedingTicks = 6000;
+    public boolean pigTakeDamageFromWater = false;
     private void pigSettings() {
         pigRidable = getBoolean("mobs.pig.ridable", pigRidable);
         pigRidableInWater = getBoolean("mobs.pig.ridable-in-water", pigRidableInWater);
@@ -1402,6 +1477,7 @@ public class PurpurWorldConfig {
         pigMaxHealth = getDouble("mobs.pig.attributes.max_health", pigMaxHealth);
         pigGiveSaddleBack = getBoolean("mobs.pig.give-saddle-back", pigGiveSaddleBack);
         pigBreedingTicks = getInt("mobs.pig.breeding-delay-ticks", pigBreedingTicks);
+        pigTakeDamageFromWater = getBoolean("mobs.pig.takes-damage-from-water", pigTakeDamageFromWater);
     }
 
     public boolean piglinRidable = false;
@@ -1409,6 +1485,7 @@ public class PurpurWorldConfig {
     public boolean piglinControllable = true;
     public double piglinMaxHealth = 16.0D;
     public boolean piglinBypassMobGriefing = false;
+    public boolean piglinTakeDamageFromWater = false;
     private void piglinSettings() {
         piglinRidable = getBoolean("mobs.piglin.ridable", piglinRidable);
         piglinRidableInWater = getBoolean("mobs.piglin.ridable-in-water", piglinRidableInWater);
@@ -1420,12 +1497,14 @@ public class PurpurWorldConfig {
         }
         piglinMaxHealth = getDouble("mobs.piglin.attributes.max_health", piglinMaxHealth);
         piglinBypassMobGriefing = getBoolean("mobs.piglin.bypass-mob-griefing", piglinBypassMobGriefing);
+        piglinTakeDamageFromWater = getBoolean("mobs.piglin.takes-damage-from-water", piglinTakeDamageFromWater);
     }
 
     public boolean piglinBruteRidable = false;
     public boolean piglinBruteRidableInWater = false;
     public boolean piglinBruteControllable = true;
     public double piglinBruteMaxHealth = 50.0D;
+    public boolean piglinBruteTakeDamageFromWater = false;
     private void piglinBruteSettings() {
         piglinBruteRidable = getBoolean("mobs.piglin_brute.ridable", piglinBruteRidable);
         piglinBruteRidableInWater = getBoolean("mobs.piglin_brute.ridable-in-water", piglinBruteRidableInWater);
@@ -1436,6 +1515,7 @@ public class PurpurWorldConfig {
             set("mobs.piglin_brute.attributes.max_health", oldValue);
         }
         piglinBruteMaxHealth = getDouble("mobs.piglin_brute.attributes.max_health", piglinBruteMaxHealth);
+        piglinBruteTakeDamageFromWater = getBoolean("mobs.piglin_brute.takes-damage-from-water", piglinBruteTakeDamageFromWater);
     }
 
     public boolean pillagerRidable = false;
@@ -1443,6 +1523,7 @@ public class PurpurWorldConfig {
     public boolean pillagerControllable = true;
     public double pillagerMaxHealth = 24.0D;
     public boolean pillagerBypassMobGriefing = false;
+    public boolean pillagerTakeDamageFromWater = false;
     private void pillagerSettings() {
         pillagerRidable = getBoolean("mobs.pillager.ridable", pillagerRidable);
         pillagerRidableInWater = getBoolean("mobs.pillager.ridable-in-water", pillagerRidableInWater);
@@ -1454,6 +1535,7 @@ public class PurpurWorldConfig {
         }
         pillagerMaxHealth = getDouble("mobs.pillager.attributes.max_health", pillagerMaxHealth);
         pillagerBypassMobGriefing = getBoolean("mobs.pillager.bypass-mob-griefing", pillagerBypassMobGriefing);
+        pillagerTakeDamageFromWater = getBoolean("mobs.pillager.takes-damage-from-water", pillagerTakeDamageFromWater);
     }
 
     public boolean polarBearRidable = false;
@@ -1463,6 +1545,7 @@ public class PurpurWorldConfig {
     public String polarBearBreedableItemString = "";
     public Item polarBearBreedableItem = null;
     public int polarBearBreedingTicks = 6000;
+    public boolean polarBearTakeDamageFromWater = false;
     private void polarBearSettings() {
         polarBearRidable = getBoolean("mobs.polar_bear.ridable", polarBearRidable);
         polarBearRidableInWater = getBoolean("mobs.polar_bear.ridable-in-water", polarBearRidableInWater);
@@ -1477,11 +1560,13 @@ public class PurpurWorldConfig {
         Item item = Registry.ITEM.get(new ResourceLocation(polarBearBreedableItemString));
         if (item != Items.AIR) polarBearBreedableItem = item;
         polarBearBreedingTicks = getInt("mobs.polar_bear.breeding-delay-ticks", polarBearBreedingTicks);
+        polarBearTakeDamageFromWater = getBoolean("mobs.polar_bear.takes-damage-from-water", polarBearTakeDamageFromWater);
     }
 
     public boolean pufferfishRidable = false;
     public boolean pufferfishControllable = true;
     public double pufferfishMaxHealth = 3.0D;
+    public boolean pufferfishTakeDamageFromWater = false;
     private void pufferfishSettings() {
         pufferfishRidable = getBoolean("mobs.pufferfish.ridable", pufferfishRidable);
         pufferfishControllable = getBoolean("mobs.pufferfish.controllable", pufferfishControllable);
@@ -1491,6 +1576,7 @@ public class PurpurWorldConfig {
             set("mobs.pufferfish.attributes.max_health", oldValue);
         }
         pufferfishMaxHealth = getDouble("mobs.pufferfish.attributes.max_health", pufferfishMaxHealth);
+        pufferfishTakeDamageFromWater = getBoolean("mobs.pufferfish.takes-damage-from-water", pufferfishTakeDamageFromWater);
     }
 
     public boolean rabbitRidable = false;
@@ -1501,6 +1587,7 @@ public class PurpurWorldConfig {
     public double rabbitNaturalKiller = 0.0D;
     public int rabbitBreedingTicks = 6000;
     public boolean rabbitBypassMobGriefing = false;
+    public boolean rabbitTakeDamageFromWater = false;
     private void rabbitSettings() {
         rabbitRidable = getBoolean("mobs.rabbit.ridable", rabbitRidable);
         rabbitRidableInWater = getBoolean("mobs.rabbit.ridable-in-water", rabbitRidableInWater);
@@ -1515,6 +1602,7 @@ public class PurpurWorldConfig {
         rabbitNaturalKiller = getDouble("mobs.rabbit.spawn-killer-rabbit-chance", rabbitNaturalKiller);
         rabbitBreedingTicks = getInt("mobs.rabbit.breeding-delay-ticks", rabbitBreedingTicks);
         rabbitBypassMobGriefing = getBoolean("mobs.rabbit.bypass-mob-griefing", rabbitBypassMobGriefing);
+        rabbitTakeDamageFromWater = getBoolean("mobs.rabbit.takes-damage-from-water", rabbitTakeDamageFromWater);
     }
 
     public boolean ravagerRidable = false;
@@ -1522,6 +1610,7 @@ public class PurpurWorldConfig {
     public boolean ravagerControllable = true;
     public double ravagerMaxHealth = 100.0D;
     public boolean ravagerBypassMobGriefing = false;
+    public boolean ravagerTakeDamageFromWater = false;
     private void ravagerSettings() {
         ravagerRidable = getBoolean("mobs.ravager.ridable", ravagerRidable);
         ravagerRidableInWater = getBoolean("mobs.ravager.ridable-in-water", ravagerRidableInWater);
@@ -1533,11 +1622,13 @@ public class PurpurWorldConfig {
         }
         ravagerMaxHealth = getDouble("mobs.ravager.attributes.max_health", ravagerMaxHealth);
         ravagerBypassMobGriefing = getBoolean("mobs.ravager.bypass-mob-griefing", ravagerBypassMobGriefing);
+        ravagerTakeDamageFromWater = getBoolean("mobs.ravager.takes-damage-from-water", ravagerTakeDamageFromWater);
     }
 
     public boolean salmonRidable = false;
     public boolean salmonControllable = true;
     public double salmonMaxHealth = 3.0D;
+    public boolean salmonTakeDamageFromWater = false;
     private void salmonSettings() {
         salmonRidable = getBoolean("mobs.salmon.ridable", salmonRidable);
         salmonControllable = getBoolean("mobs.salmon.controllable", salmonControllable);
@@ -1547,6 +1638,7 @@ public class PurpurWorldConfig {
             set("mobs.salmon.attributes.max_health", oldValue);
         }
         salmonMaxHealth = getDouble("mobs.salmon.attributes.max_health", salmonMaxHealth);
+        salmonTakeDamageFromWater = getBoolean("mobs.salmon.takes-damage-from-water", salmonTakeDamageFromWater);
     }
 
     public boolean sheepRidable = false;
@@ -1555,6 +1647,7 @@ public class PurpurWorldConfig {
     public double sheepMaxHealth = 8.0D;
     public int sheepBreedingTicks = 6000;
     public boolean sheepBypassMobGriefing = false;
+    public boolean sheepTakeDamageFromWater = false;
     private void sheepSettings() {
         sheepRidable = getBoolean("mobs.sheep.ridable", sheepRidable);
         sheepRidableInWater = getBoolean("mobs.sheep.ridable-in-water", sheepRidableInWater);
@@ -1567,12 +1660,14 @@ public class PurpurWorldConfig {
         sheepMaxHealth = getDouble("mobs.sheep.attributes.max_health", sheepMaxHealth);
         sheepBreedingTicks = getInt("mobs.sheep.breeding-delay-ticks", sheepBreedingTicks);
         sheepBypassMobGriefing = getBoolean("mobs.sheep.bypass-mob-griefing", sheepBypassMobGriefing);
+        sheepTakeDamageFromWater = getBoolean("mobs.sheep.takes-damage-from-water", sheepTakeDamageFromWater);
     }
 
     public boolean shulkerRidable = false;
     public boolean shulkerRidableInWater = false;
     public boolean shulkerControllable = true;
     public double shulkerMaxHealth = 30.0D;
+    public boolean shulkerTakeDamageFromWater = false;
     private void shulkerSettings() {
         shulkerRidable = getBoolean("mobs.shulker.ridable", shulkerRidable);
         shulkerRidableInWater = getBoolean("mobs.shulker.ridable-in-water", shulkerRidableInWater);
@@ -1583,6 +1678,7 @@ public class PurpurWorldConfig {
             set("mobs.shulker.attributes.max_health", oldValue);
         }
         shulkerMaxHealth = getDouble("mobs.shulker.attributes.max_health", shulkerMaxHealth);
+        shulkerTakeDamageFromWater = getBoolean("mobs.shulker.takes-damage-from-water", shulkerTakeDamageFromWater);
     }
 
     public boolean silverfishRidable = false;
@@ -1590,6 +1686,7 @@ public class PurpurWorldConfig {
     public boolean silverfishControllable = true;
     public double silverfishMaxHealth = 8.0D;
     public boolean silverfishBypassMobGriefing = false;
+    public boolean silverfishTakeDamageFromWater = false;
     private void silverfishSettings() {
         silverfishRidable = getBoolean("mobs.silverfish.ridable", silverfishRidable);
         silverfishRidableInWater = getBoolean("mobs.silverfish.ridable-in-water", silverfishRidableInWater);
@@ -1601,12 +1698,14 @@ public class PurpurWorldConfig {
         }
         silverfishMaxHealth = getDouble("mobs.silverfish.attributes.max_health", silverfishMaxHealth);
         silverfishBypassMobGriefing = getBoolean("mobs.silverfish.bypass-mob-griefing", silverfishBypassMobGriefing);
+        silverfishTakeDamageFromWater = getBoolean("mobs.silverfish.takes-damage-from-water", silverfishTakeDamageFromWater);
     }
 
     public boolean skeletonRidable = false;
     public boolean skeletonRidableInWater = false;
     public boolean skeletonControllable = true;
     public double skeletonMaxHealth = 20.0D;
+    public boolean skeletonTakeDamageFromWater = false;
     private void skeletonSettings() {
         skeletonRidable = getBoolean("mobs.skeleton.ridable", skeletonRidable);
         skeletonRidableInWater = getBoolean("mobs.skeleton.ridable-in-water", skeletonRidableInWater);
@@ -1617,6 +1716,7 @@ public class PurpurWorldConfig {
             set("mobs.skeleton.attributes.max_health", oldValue);
         }
         skeletonMaxHealth = getDouble("mobs.skeleton.attributes.max_health", skeletonMaxHealth);
+        skeletonTakeDamageFromWater = getBoolean("mobs.skeleton.takes-damage-from-water", skeletonTakeDamageFromWater);
     }
 
     public boolean skeletonHorseRidableInWater = true;
@@ -1627,6 +1727,7 @@ public class PurpurWorldConfig {
     public double skeletonHorseJumpStrengthMax = 1.0D;
     public double skeletonHorseMovementSpeedMin = 0.2D;
     public double skeletonHorseMovementSpeedMax = 0.2D;
+    public boolean skeletonHorseTakeDamageFromWater = false;
     private void skeletonHorseSettings() {
         skeletonHorseRidableInWater = getBoolean("mobs.skeleton_horse.ridable-in-water", skeletonHorseRidableInWater);
         skeletonHorseCanSwim = getBoolean("mobs.skeleton_horse.can-swim", skeletonHorseCanSwim);
@@ -1642,6 +1743,7 @@ public class PurpurWorldConfig {
         skeletonHorseJumpStrengthMax = getDouble("mobs.skeleton_horse.attributes.jump_strength.max", skeletonHorseJumpStrengthMax);
         skeletonHorseMovementSpeedMin = getDouble("mobs.skeleton_horse.attributes.movement_speed.min", skeletonHorseMovementSpeedMin);
         skeletonHorseMovementSpeedMax = getDouble("mobs.skeleton_horse.attributes.movement_speed.max", skeletonHorseMovementSpeedMax);
+        skeletonHorseTakeDamageFromWater = getBoolean("mobs.skeleton_horse.takes-damage-from-water", skeletonHorseTakeDamageFromWater);
     }
 
     public boolean slimeRidable = false;
@@ -1651,6 +1753,7 @@ public class PurpurWorldConfig {
     public String slimeAttackDamage = "size";
     public Map<Integer, Double> slimeMaxHealthCache = new HashMap<>();
     public Map<Integer, Double> slimeAttackDamageCache = new HashMap<>();
+    public boolean slimeTakeDamageFromWater = false;
     private void slimeSettings() {
         slimeRidable = getBoolean("mobs.slime.ridable", slimeRidable);
         slimeRidableInWater = getBoolean("mobs.slime.ridable-in-water", slimeRidableInWater);
@@ -1664,6 +1767,7 @@ public class PurpurWorldConfig {
         slimeAttackDamage = getString("mobs.slime.attributes.attack_damage", slimeAttackDamage);
         slimeMaxHealthCache.clear();
         slimeAttackDamageCache.clear();
+        slimeTakeDamageFromWater = getBoolean("mobs.slime.takes-damage-from-water", slimeTakeDamageFromWater);
     }
 
     public boolean snowGolemRidable = false;
@@ -1678,6 +1782,7 @@ public class PurpurWorldConfig {
     public float snowGolemSnowBallModifier = 10.0F;
     public double snowGolemAttackDistance = 1.25D;
     public boolean snowGolemBypassMobGriefing = false;
+    public boolean snowGolemTakeDamageFromWater = true;
     private void snowGolemSettings() {
         snowGolemRidable = getBoolean("mobs.snow_golem.ridable", snowGolemRidable);
         snowGolemRidableInWater = getBoolean("mobs.snow_golem.ridable-in-water", snowGolemRidableInWater);
@@ -1696,6 +1801,7 @@ public class PurpurWorldConfig {
         snowGolemSnowBallModifier = (float) getDouble("mobs.snow_golem.snow-ball-modifier", snowGolemSnowBallModifier);
         snowGolemAttackDistance = getDouble("mobs.snow_golem.attack-distance", snowGolemAttackDistance);
         snowGolemBypassMobGriefing = getBoolean("mobs.snow_golem.bypass-mob-griefing", snowGolemBypassMobGriefing);
+        snowGolemTakeDamageFromWater = getBoolean("mobs.snow_golem.takes-damage-from-water", snowGolemTakeDamageFromWater);
     }
 
     public boolean squidRidable = false;
@@ -1704,6 +1810,7 @@ public class PurpurWorldConfig {
     public boolean squidImmuneToEAR = true;
     public double squidOffsetWaterCheck = 0.0D;
     public boolean squidsCanFly = false;
+    public boolean squidTakeDamageFromWater = false;
     private void squidSettings() {
         squidRidable = getBoolean("mobs.squid.ridable", squidRidable);
         squidControllable = getBoolean("mobs.squid.controllable", squidControllable);
@@ -1716,12 +1823,14 @@ public class PurpurWorldConfig {
         squidImmuneToEAR = getBoolean("mobs.squid.immune-to-EAR", squidImmuneToEAR);
         squidOffsetWaterCheck = getDouble("mobs.squid.water-offset-check", squidOffsetWaterCheck);
         squidsCanFly = getBoolean("mobs.squid.can-fly", squidsCanFly);
+        squidTakeDamageFromWater = getBoolean("mobs.squid.takes-damage-from-water", squidTakeDamageFromWater);
     }
 
     public boolean spiderRidable = false;
     public boolean spiderRidableInWater = false;
     public boolean spiderControllable = true;
     public double spiderMaxHealth = 16.0D;
+    public boolean spiderTakeDamageFromWater = false;
     private void spiderSettings() {
         spiderRidable = getBoolean("mobs.spider.ridable", spiderRidable);
         spiderRidableInWater = getBoolean("mobs.spider.ridable-in-water", spiderRidableInWater);
@@ -1732,12 +1841,14 @@ public class PurpurWorldConfig {
             set("mobs.spider.attributes.max_health", oldValue);
         }
         spiderMaxHealth = getDouble("mobs.spider.attributes.max_health", spiderMaxHealth);
+        spiderTakeDamageFromWater = getBoolean("mobs.spider.takes-damage-from-water", spiderTakeDamageFromWater);
     }
 
     public boolean strayRidable = false;
     public boolean strayRidableInWater = false;
     public boolean strayControllable = true;
     public double strayMaxHealth = 20.0D;
+    public boolean strayTakeDamageFromWater = false;
     private void straySettings() {
         strayRidable = getBoolean("mobs.stray.ridable", strayRidable);
         strayRidableInWater = getBoolean("mobs.stray.ridable-in-water", strayRidableInWater);
@@ -1748,6 +1859,7 @@ public class PurpurWorldConfig {
             set("mobs.stray.attributes.max_health", oldValue);
         }
         strayMaxHealth = getDouble("mobs.stray.attributes.max_health", strayMaxHealth);
+        strayTakeDamageFromWater = getBoolean("mobs.stray.takes-damage-from-water", strayTakeDamageFromWater);
     }
 
     public boolean striderRidable = false;
@@ -1756,6 +1868,7 @@ public class PurpurWorldConfig {
     public double striderMaxHealth = 20.0D;
     public int striderBreedingTicks = 6000;
     public boolean striderGiveSaddleBack = false;
+    public boolean striderTakeDamageFromWater = true;
     private void striderSettings() {
         striderRidable = getBoolean("mobs.strider.ridable", striderRidable);
         striderRidableInWater = getBoolean("mobs.strider.ridable-in-water", striderRidableInWater);
@@ -1768,6 +1881,7 @@ public class PurpurWorldConfig {
         striderMaxHealth = getDouble("mobs.strider.attributes.max_health", striderMaxHealth);
         striderBreedingTicks = getInt("mobs.strider.breeding-delay-ticks", striderBreedingTicks);
         striderGiveSaddleBack = getBoolean("mobs.strider.give-saddle-back", striderGiveSaddleBack);
+        striderTakeDamageFromWater = getBoolean("mobs.strider.takes-damage-from-water", striderTakeDamageFromWater);
     }
 
     public boolean tadpoleRidable = false;
@@ -1789,6 +1903,7 @@ public class PurpurWorldConfig {
     public double traderLlamaMovementSpeedMin = 0.175D;
     public double traderLlamaMovementSpeedMax = 0.175D;
     public int traderLlamaBreedingTicks = 6000;
+    public boolean traderLlamaTakeDamageFromWater = false;
     private void traderLlamaSettings() {
         traderLlamaRidable = getBoolean("mobs.trader_llama.ridable", traderLlamaRidable);
         traderLlamaRidableInWater = getBoolean("mobs.trader_llama.ridable-in-water", traderLlamaRidableInWater);
@@ -1807,11 +1922,13 @@ public class PurpurWorldConfig {
         traderLlamaMovementSpeedMin = getDouble("mobs.trader_llama.attributes.movement_speed.min", traderLlamaMovementSpeedMin);
         traderLlamaMovementSpeedMax = getDouble("mobs.trader_llama.attributes.movement_speed.max", traderLlamaMovementSpeedMax);
         traderLlamaBreedingTicks = getInt("mobs.trader_llama.breeding-delay-ticks", traderLlamaBreedingTicks);
+        traderLlamaTakeDamageFromWater = getBoolean("mobs.trader_llama.takes-damage-from-water", traderLlamaTakeDamageFromWater);
     }
 
     public boolean tropicalFishRidable = false;
     public boolean tropicalFishControllable = true;
     public double tropicalFishMaxHealth = 3.0D;
+    public boolean tropicalFishTakeDamageFromWater = false;
     private void tropicalFishSettings() {
         tropicalFishRidable = getBoolean("mobs.tropical_fish.ridable", tropicalFishRidable);
         tropicalFishControllable = getBoolean("mobs.tropical_fish.controllable", tropicalFishControllable);
@@ -1821,6 +1938,7 @@ public class PurpurWorldConfig {
             set("mobs.tropical_fish.attributes.max_health", oldValue);
         }
         tropicalFishMaxHealth = getDouble("mobs.tropical_fish.attributes.max_health", tropicalFishMaxHealth);
+        tropicalFishTakeDamageFromWater = getBoolean("mobs.tropical_fish.takes-damage-from-water", tropicalFishTakeDamageFromWater);
     }
 
     public boolean turtleRidable = false;
@@ -1828,6 +1946,7 @@ public class PurpurWorldConfig {
     public boolean turtleControllable = true;
     public double turtleMaxHealth = 30.0D;
     public int turtleBreedingTicks = 6000;
+    public boolean turtleTakeDamageFromWater = false;
     private void turtleSettings() {
         turtleRidable = getBoolean("mobs.turtle.ridable", turtleRidable);
         turtleRidableInWater = getBoolean("mobs.turtle.ridable-in-water", turtleRidableInWater);
@@ -1839,6 +1958,7 @@ public class PurpurWorldConfig {
         }
         turtleMaxHealth = getDouble("mobs.turtle.attributes.max_health", turtleMaxHealth);
         turtleBreedingTicks = getInt("mobs.turtle.breeding-delay-ticks", turtleBreedingTicks);
+        turtleTakeDamageFromWater = getBoolean("mobs.turtle.takes-damage-from-water", turtleTakeDamageFromWater);
     }
 
     public boolean vexRidable = false;
@@ -1846,6 +1966,7 @@ public class PurpurWorldConfig {
     public boolean vexControllable = true;
     public double vexMaxY = 320D;
     public double vexMaxHealth = 14.0D;
+    public boolean vexTakeDamageFromWater = false;
     private void vexSettings() {
         vexRidable = getBoolean("mobs.vex.ridable", vexRidable);
         vexRidableInWater = getBoolean("mobs.vex.ridable-in-water", vexRidableInWater);
@@ -1857,6 +1978,7 @@ public class PurpurWorldConfig {
             set("mobs.vex.attributes.max_health", oldValue);
         }
         vexMaxHealth = getDouble("mobs.vex.attributes.max_health", vexMaxHealth);
+        vexTakeDamageFromWater = getBoolean("mobs.vex.takes-damage-from-water", vexTakeDamageFromWater);
     }
 
     public boolean villagerRidable = false;
@@ -1872,6 +1994,7 @@ public class PurpurWorldConfig {
     public boolean villagerClericsFarmWarts = false;
     public boolean villagerClericFarmersThrowWarts = true;
     public boolean villagerBypassMobGriefing = false;
+    public boolean villagerTakeDamageFromWater = false;
     private void villagerSettings() {
         villagerRidable = getBoolean("mobs.villager.ridable", villagerRidable);
         villagerRidableInWater = getBoolean("mobs.villager.ridable-in-water", villagerRidableInWater);
@@ -1891,6 +2014,7 @@ public class PurpurWorldConfig {
         villagerClericsFarmWarts = getBoolean("mobs.villager.clerics-farm-warts", villagerClericsFarmWarts);
         villagerClericFarmersThrowWarts = getBoolean("mobs.villager.cleric-wart-farmers-throw-warts-at-villagers", villagerClericFarmersThrowWarts);
         villagerBypassMobGriefing = getBoolean("mobs.villager.bypass-mob-griefing", villagerBypassMobGriefing);
+        villagerTakeDamageFromWater = getBoolean("mobs.villager.takes-damage-from-water", villagerTakeDamageFromWater);
     }
 
     public boolean vindicatorRidable = false;
@@ -1898,6 +2022,7 @@ public class PurpurWorldConfig {
     public boolean vindicatorControllable = true;
     public double vindicatorMaxHealth = 24.0D;
     public double vindicatorJohnnySpawnChance = 0D;
+    public boolean vindicatorTakeDamageFromWater = false;
     private void vindicatorSettings() {
         vindicatorRidable = getBoolean("mobs.vindicator.ridable", vindicatorRidable);
         vindicatorRidableInWater = getBoolean("mobs.vindicator.ridable-in-water", vindicatorRidableInWater);
@@ -1909,6 +2034,7 @@ public class PurpurWorldConfig {
         }
         vindicatorMaxHealth = getDouble("mobs.vindicator.attributes.max_health", vindicatorMaxHealth);
         vindicatorJohnnySpawnChance = getDouble("mobs.vindicator.johnny.spawn-chance", vindicatorJohnnySpawnChance);
+        vindicatorTakeDamageFromWater = getBoolean("mobs.vindicator.takes-damage-from-water", vindicatorTakeDamageFromWater);
     }
 
     public boolean wanderingTraderRidable = false;
@@ -1917,6 +2043,7 @@ public class PurpurWorldConfig {
     public double wanderingTraderMaxHealth = 20.0D;
     public boolean wanderingTraderFollowEmeraldBlock = false;
     public boolean wanderingTraderCanBeLeashed = false;
+    public boolean wanderingTraderTakeDamageFromWater = false;
     private void wanderingTraderSettings() {
         wanderingTraderRidable = getBoolean("mobs.wandering_trader.ridable", wanderingTraderRidable);
         wanderingTraderRidableInWater = getBoolean("mobs.wandering_trader.ridable-in-water", wanderingTraderRidableInWater);
@@ -1929,6 +2056,7 @@ public class PurpurWorldConfig {
         wanderingTraderMaxHealth = getDouble("mobs.wandering_trader.attributes.max_health", wanderingTraderMaxHealth);
         wanderingTraderFollowEmeraldBlock = getBoolean("mobs.wandering_trader.follow-emerald-blocks", wanderingTraderFollowEmeraldBlock);
         wanderingTraderCanBeLeashed = getBoolean("mobs.wandering_trader.can-be-leashed", wanderingTraderCanBeLeashed);
+        wanderingTraderTakeDamageFromWater = getBoolean("mobs.wandering_trader.takes-damage-from-water", wanderingTraderTakeDamageFromWater);
     }
 
     public boolean wardenRidable = false;
@@ -1944,6 +2072,7 @@ public class PurpurWorldConfig {
     public boolean witchRidableInWater = false;
     public boolean witchControllable = true;
     public double witchMaxHealth = 26.0D;
+    public boolean witchTakeDamageFromWater = false;
     private void witchSettings() {
         witchRidable = getBoolean("mobs.witch.ridable", witchRidable);
         witchRidableInWater = getBoolean("mobs.witch.ridable-in-water", witchRidableInWater);
@@ -1954,6 +2083,7 @@ public class PurpurWorldConfig {
             set("mobs.witch.attributes.max_health", oldValue);
         }
         witchMaxHealth = getDouble("mobs.witch.attributes.max_health", witchMaxHealth);
+        witchTakeDamageFromWater = getBoolean("mobs.witch.takes-damage-from-water", witchTakeDamageFromWater);
     }
 
     public boolean witherRidable = false;
@@ -1964,6 +2094,7 @@ public class PurpurWorldConfig {
     public float witherHealthRegenAmount = 1.0f;
     public int witherHealthRegenDelay = 20;
     public boolean witherBypassMobGriefing = false;
+    public boolean witherTakeDamageFromWater = false;
     private void witherSettings() {
         witherRidable = getBoolean("mobs.wither.ridable", witherRidable);
         witherRidableInWater = getBoolean("mobs.wither.ridable-in-water", witherRidableInWater);
@@ -1982,12 +2113,14 @@ public class PurpurWorldConfig {
         witherHealthRegenAmount = (float) getDouble("mobs.wither.health-regen-amount", witherHealthRegenAmount);
         witherHealthRegenDelay = getInt("mobs.wither.health-regen-delay", witherHealthRegenDelay);
         witherBypassMobGriefing = getBoolean("mobs.wither.bypass-mob-griefing", witherBypassMobGriefing);
+        witherTakeDamageFromWater = getBoolean("mobs.wither.takes-damage-from-water", witherTakeDamageFromWater);
     }
 
     public boolean witherSkeletonRidable = false;
     public boolean witherSkeletonRidableInWater = false;
     public boolean witherSkeletonControllable = true;
     public double witherSkeletonMaxHealth = 20.0D;
+    public boolean witherSkeletonTakeDamageFromWater = false;
     private void witherSkeletonSettings() {
         witherSkeletonRidable = getBoolean("mobs.wither_skeleton.ridable", witherSkeletonRidable);
         witherSkeletonRidableInWater = getBoolean("mobs.wither_skeleton.ridable-in-water", witherSkeletonRidableInWater);
@@ -1998,6 +2131,7 @@ public class PurpurWorldConfig {
             set("mobs.wither_skeleton.attributes.max_health", oldValue);
         }
         witherSkeletonMaxHealth = getDouble("mobs.wither_skeleton.attributes.max_health", witherSkeletonMaxHealth);
+        witherSkeletonTakeDamageFromWater = getBoolean("mobs.wither_skeleton.takes-damage-from-water", witherSkeletonTakeDamageFromWater);
     }
 
     public boolean wolfRidable = false;
@@ -2008,6 +2142,7 @@ public class PurpurWorldConfig {
     public boolean wolfMilkCuresRabies = true;
     public double wolfNaturalRabid = 0.0D;
     public int wolfBreedingTicks = 6000;
+    public boolean wolfTakeDamageFromWater = false;
     private void wolfSettings() {
         wolfRidable = getBoolean("mobs.wolf.ridable", wolfRidable);
         wolfRidableInWater = getBoolean("mobs.wolf.ridable-in-water", wolfRidableInWater);
@@ -2026,12 +2161,14 @@ public class PurpurWorldConfig {
         wolfMilkCuresRabies = getBoolean("mobs.wolf.milk-cures-rabid-wolves", wolfMilkCuresRabies);
         wolfNaturalRabid = getDouble("mobs.wolf.spawn-rabid-chance", wolfNaturalRabid);
         wolfBreedingTicks = getInt("mobs.wolf.breeding-delay-ticks", wolfBreedingTicks);
+        wolfTakeDamageFromWater = getBoolean("mobs.wolf.takes-damage-from-water", wolfTakeDamageFromWater);
     }
 
     public boolean zoglinRidable = false;
     public boolean zoglinRidableInWater = false;
     public boolean zoglinControllable = true;
     public double zoglinMaxHealth = 40.0D;
+    public boolean zoglinTakeDamageFromWater = false;
     private void zoglinSettings() {
         zoglinRidable = getBoolean("mobs.zoglin.ridable", zoglinRidable);
         zoglinRidableInWater = getBoolean("mobs.zoglin.ridable-in-water", zoglinRidableInWater);
@@ -2042,6 +2179,7 @@ public class PurpurWorldConfig {
             set("mobs.zoglin.attributes.max_health", oldValue);
         }
         zoglinMaxHealth = getDouble("mobs.zoglin.attributes.max_health", zoglinMaxHealth);
+        zoglinTakeDamageFromWater = getBoolean("mobs.zoglin.takes-damage-from-water", zoglinTakeDamageFromWater);
     }
 
     public boolean zombieRidable = false;
@@ -2054,6 +2192,7 @@ public class PurpurWorldConfig {
     public boolean zombieJockeyTryExistingChickens = true;
     public boolean zombieAggressiveTowardsVillagerWhenLagging = true;
     public boolean zombieBypassMobGriefing = false;
+    public boolean zombieTakeDamageFromWater = false;
     private void zombieSettings() {
         zombieRidable = getBoolean("mobs.zombie.ridable", zombieRidable);
         zombieRidableInWater = getBoolean("mobs.zombie.ridable-in-water", zombieRidableInWater);
@@ -2070,6 +2209,7 @@ public class PurpurWorldConfig {
         zombieJockeyTryExistingChickens = getBoolean("mobs.zombie.jockey.try-existing-chickens", zombieJockeyTryExistingChickens);
         zombieAggressiveTowardsVillagerWhenLagging = getBoolean("mobs.zombie.aggressive-towards-villager-when-lagging", zombieAggressiveTowardsVillagerWhenLagging);
         zombieBypassMobGriefing = getBoolean("mobs.zombie.bypass-mob-griefing", zombieBypassMobGriefing);
+        zombieTakeDamageFromWater = getBoolean("mobs.zombie.takes-damage-from-water", zombieTakeDamageFromWater);
     }
 
     public boolean zombieHorseRidableInWater = false;
@@ -2081,6 +2221,7 @@ public class PurpurWorldConfig {
     public double zombieHorseMovementSpeedMin = 0.2D;
     public double zombieHorseMovementSpeedMax = 0.2D;
     public double zombieHorseSpawnChance = 0.0D;
+    public boolean zombieHorseTakeDamageFromWater = false;
     private void zombieHorseSettings() {
         zombieHorseRidableInWater = getBoolean("mobs.zombie_horse.ridable-in-water", zombieHorseRidableInWater);
         zombieHorseCanSwim = getBoolean("mobs.zombie_horse.can-swim", zombieHorseCanSwim);
@@ -2097,6 +2238,7 @@ public class PurpurWorldConfig {
         zombieHorseMovementSpeedMin = getDouble("mobs.zombie_horse.attributes.movement_speed.min", zombieHorseMovementSpeedMin);
         zombieHorseMovementSpeedMax = getDouble("mobs.zombie_horse.attributes.movement_speed.max", zombieHorseMovementSpeedMax);
         zombieHorseSpawnChance = getDouble("mobs.zombie_horse.spawn-chance", zombieHorseSpawnChance);
+        zombieHorseTakeDamageFromWater = getBoolean("mobs.zombie_horse.takes-damage-from-water", zombieHorseTakeDamageFromWater);
     }
 
     public boolean zombieVillagerRidable = false;
@@ -2107,6 +2249,7 @@ public class PurpurWorldConfig {
     public boolean zombieVillagerJockeyOnlyBaby = true;
     public double zombieVillagerJockeyChance = 0.05D;
     public boolean zombieVillagerJockeyTryExistingChickens = true;
+    public boolean zombieVillagerTakeDamageFromWater = false;
     private void zombieVillagerSettings() {
         zombieVillagerRidable = getBoolean("mobs.zombie_villager.ridable", zombieVillagerRidable);
         zombieVillagerRidableInWater = getBoolean("mobs.zombie_villager.ridable-in-water", zombieVillagerRidableInWater);
@@ -2121,6 +2264,7 @@ public class PurpurWorldConfig {
         zombieVillagerJockeyOnlyBaby = getBoolean("mobs.zombie_villager.jockey.only-babies", zombieVillagerJockeyOnlyBaby);
         zombieVillagerJockeyChance = getDouble("mobs.zombie_villager.jockey.chance", zombieVillagerJockeyChance);
         zombieVillagerJockeyTryExistingChickens = getBoolean("mobs.zombie_villager.jockey.try-existing-chickens", zombieVillagerJockeyTryExistingChickens);
+        zombieVillagerTakeDamageFromWater = getBoolean("mobs.zombie_villager.takes-damage-from-water", zombieVillagerTakeDamageFromWater);
     }
 
     public boolean zombifiedPiglinRidable = false;
@@ -2132,6 +2276,7 @@ public class PurpurWorldConfig {
     public double zombifiedPiglinJockeyChance = 0.05D;
     public boolean zombifiedPiglinJockeyTryExistingChickens = true;
     public boolean zombifiedPiglinCountAsPlayerKillWhenAngry = true;
+    public boolean zombifiedPiglinTakeDamageFromWater = false;
     private void zombifiedPiglinSettings() {
         zombifiedPiglinRidable = getBoolean("mobs.zombified_piglin.ridable", zombifiedPiglinRidable);
         zombifiedPiglinRidableInWater = getBoolean("mobs.zombified_piglin.ridable-in-water", zombifiedPiglinRidableInWater);
@@ -2147,5 +2292,6 @@ public class PurpurWorldConfig {
         zombifiedPiglinJockeyChance = getDouble("mobs.zombified_piglin.jockey.chance", zombifiedPiglinJockeyChance);
         zombifiedPiglinJockeyTryExistingChickens = getBoolean("mobs.zombified_piglin.jockey.try-existing-chickens", zombifiedPiglinJockeyTryExistingChickens);
         zombifiedPiglinCountAsPlayerKillWhenAngry = getBoolean("mobs.zombified_piglin.count-as-player-kill-when-angry", zombifiedPiglinCountAsPlayerKillWhenAngry);
+        zombifiedPiglinTakeDamageFromWater = getBoolean("mobs.zombified_piglin.takes-damage-from-water", zombifiedPiglinTakeDamageFromWater);
     }
 }
