From 7da353e9f6f6296fde0996f119824c2ea287a493 Mon Sep 17 00:00:00 2001
From: William Blake Galbreath <blake.galbreath@gmail.com>
Date: Sun, 21 Jul 2019 18:06:20 -0500
Subject: [PATCH] Ladders should not bypass cramming gamerule

---
 src/main/java/net/minecraft/server/Entity.java        |  5 +++++
 src/main/java/net/minecraft/server/EntityLiving.java  | 11 +++++++++--
 .../java/net/minecraft/server/IEntitySelector.java    |  7 ++++++-
 3 files changed, 20 insertions(+), 3 deletions(-)

diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index cfe21c2e70..1857cfb877 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -1523,6 +1523,11 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     }
 
     public boolean isCollidable() {
+        // Purpur start
+        return isCollidable(false);
+    }
+    public boolean isCollidable(boolean ignoreClimbing) {
+        // Purpur end
         return false;
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index aa60c00842..4e6598cf5a 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -2609,7 +2609,7 @@ public abstract class EntityLiving extends Entity {
     protected void doTick() {}
 
     protected void collideNearby() {
-        List<Entity> list = this.world.getEntities(this, this.getBoundingBox(), IEntitySelector.a(this));
+        List<Entity> list = this.world.getEntities(this, this.getBoundingBox(), IEntitySelector.a(this, true)); // Purpur
 
         if (!list.isEmpty()) {
             int i = this.world.getGameRules().getInt(GameRules.MAX_ENTITY_CRAMMING);
@@ -2748,7 +2748,14 @@ public abstract class EntityLiving extends Entity {
 
     @Override
     public boolean isCollidable() {
-        return this.isAlive() && !this.isClimbing() && this.collides; // CraftBukkit
+        // Purpur start
+        return isCollidable(false);
+    }
+
+    @Override
+    public boolean isCollidable(boolean ignoreClimbing) {
+        return this.isAlive() && (ignoreClimbing || !isClimbing()) && this.collides; // CraftBukkit
+        // Purpur end
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/IEntitySelector.java b/src/main/java/net/minecraft/server/IEntitySelector.java
index 56488b78dd..7ef7fe228b 100644
--- a/src/main/java/net/minecraft/server/IEntitySelector.java
+++ b/src/main/java/net/minecraft/server/IEntitySelector.java
@@ -32,11 +32,16 @@ public final class IEntitySelector {
     }
 
     public static Predicate<Entity> a(Entity entity) {
+        // Purpur start
+        return a(entity, false);
+    }
+    public static Predicate<Entity> a(Entity entity, boolean ignoreClimbing) {
+        // Purpur end
         ScoreboardTeamBase scoreboardteambase = entity.getScoreboardTeam();
         ScoreboardTeamBase.EnumTeamPush scoreboardteambase_enumteampush = scoreboardteambase == null ? ScoreboardTeamBase.EnumTeamPush.ALWAYS : scoreboardteambase.getCollisionRule();
 
         return (Predicate) (scoreboardteambase_enumteampush == ScoreboardTeamBase.EnumTeamPush.NEVER ? Predicates.alwaysFalse() : IEntitySelector.f.and((entity1) -> {
-            if (!entity1.isCollidable()) {
+            if (!entity1.isCollidable(ignoreClimbing)) { // Purpur
                 return false;
             } else if (entity.world.isClientSide && (!(entity1 instanceof EntityHuman) || !((EntityHuman) entity1).dG())) {
                 return false;
-- 
2.20.1

